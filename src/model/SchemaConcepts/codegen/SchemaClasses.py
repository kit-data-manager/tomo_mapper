# generated by datamodel-codegen:
#   filename:  SEM_FIB_Tomography_Acquisition_Main.json
#   timestamp: 2025-02-07T16:51:21+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union
from typing_extensions import Annotated

from pydantic import BaseModel, ConfigDict, Field, RootModel


class MeasurementPurpose(Enum):
    assessment__to_given_categories_or_values_ = (
        'assessment (to given categories or values)'
    )
    completeness_check__presence_or_absence_of_given_properties_ = (
        'completeness check (presence or absence of given properties)'
    )
    correlative_characterization__dedicated_sample_treatment_to_emphasise_given_features_ = 'correlative characterization (dedicated sample treatment to emphasise given features)'
    exploratory__routine_check_of_known_properties_ = (
        'exploratory (routine check of known properties)'
    )
    feasibility__quick_check__rough_estimate_ = (
        'feasibility (quick check, rough estimate)'
    )
    high_quality_measurement__precise__careful_treatment_ = (
        'high quality measurement (precise, careful treatment)'
    )
    test_specific_hypothesis__focus_only_on_given_aspects_ = (
        'test specific hypothesis (focus only on given aspects)'
    )
    other__please_specify_in_the_comment_ = 'other (please specify in the comment)'


class ParentType(Enum):
    not_applicable = 'not applicable'
    sample = 'sample'


class ParentReferenceType(Enum):
    plain_text = 'plain text'
    external_URL = 'external URL'
    MetaStore_URI = 'MetaStore URI'


class Parent(BaseModel):
    parentType: Optional[ParentType] = 'sample'
    parentReferenceType: Optional[ParentReferenceType] = 'MetaStore URI'
    parentReference: Annotated[
        Optional[str],
        Field(
            description="If type is 'MetaStore URI' it is possible to easily fill this field in a later stage"
        ),
    ] = None


class DatasetType(Enum):
    SEM_Image = 'SEM Image'
    SEM_Image_2 = 'SEM Image 2'
    SEM_Image_3 = 'SEM Image 3'
    SEM_Image_4 = 'SEM Image 4'
    SEM_Image_5 = 'SEM Image 5'
    EDS = 'EDS'
    EBSD = 'EBSD'
    BSE = 'BSE'
    ISE_Image = 'ISE Image'
    ISI_Image = 'ISI Image'
    SI_Image = 'SI Image'
    InLens = 'InLens'
    SESI = 'SESI'
    FIB_Image = 'FIB Image'
    FIB_Multi_Detector_Image_Q1 = 'FIB Multi-Detector Image-Q1'
    FIB_Multi_Detector_Image_Q2 = 'FIB Multi-Detector Image-Q2'
    SEM_Multi_Detector_Image_Q1 = 'SEM Multi-Detector Image-Q1'
    SEM_Multi_Detector_Image_Q2 = 'SEM Multi-Detector Image-Q2'


class Role(Enum):
    Data_Curator = 'Data Curator'
    Instrument_Scientist = 'Instrument Scientist'
    Team_Leader = 'Team Leader'
    Team_Member = 'Team Member'


class IdentifierType(Enum):
    ROR = 'ROR'
    GRID = 'GRID'
    ISNI = 'ISNI'
    URL = 'URL'
    DOI = 'DOI'
    Handle = 'Handle'


class InstitutionID(BaseModel):
    identifierValue: Annotated[
        Optional[str],
        Field(description='(Optional) - String containing the value of an identifier'),
    ] = None
    identifierType: Annotated[
        Optional[IdentifierType],
        Field(
            description='(Optional) - Type of the identifier to be chosen from a controlled list of values (*ROR *GRID *ISNI *URL *DOI *Handle)'
        ),
    ] = None


class Affiliation(BaseModel):
    institutionName: Annotated[
        Optional[str], Field(description='(Optional) - Full name of the institution')
    ] = None
    institutionAcronym: Annotated[
        Optional[str], Field(description='(Recommended) - Acronym of the institution')
    ] = None
    institutionDepartment: Annotated[
        Optional[str],
        Field(description='(Optional) - Department within an institution'),
    ] = None
    institutionID: Optional[InstitutionID] = None


class Contact(BaseModel):
    email: Annotated[Optional[str], Field(description='(Optional) - Email Address')] = (
        None
    )


class Contact1(BaseModel):
    orcid: Annotated[
        Optional[str],
        Field(
            description='(Optional) - ORCID URL',
            pattern='^https://orcid\\.org/[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{3}[X0-9]{1}$',
        ),
    ] = None


class UserDescription(BaseModel):
    userName: Annotated[
        Optional[str],
        Field(
            description='(Required) - Full name of the user in the format (Family Name, Given Name)'
        ),
    ] = None
    givenName: Annotated[
        Optional[str], Field(description='(Optional) - Given name of the user')
    ] = None
    familyName: Annotated[
        Optional[str], Field(description='(Optional) - Family name of the user')
    ] = None
    age: Annotated[
        Optional[float], Field(description='(Optional) - Age of the user')
    ] = None
    role: Annotated[
        Optional[Role],
        Field(
            description='(Required) - Role of the user to be selected from: *Data Curator *Instrument Scientist *Team Leader *Team Member'
        ),
    ] = None
    affiliation: Annotated[
        Optional[Affiliation],
        Field(
            description='(Optional) - Details of the institution to which the user is affiliated'
        ),
    ] = None
    contact: Optional[List[Union[Contact, Contact1]]] = None


class UserMode(Enum):
    High_vacuum = 'High vacuum'
    Medium_vacuum = 'Medium vacuum'
    Low_vacuum = 'Low vacuum'


class IdentifierType1(Enum):
    ROR = 'ROR'
    GRID = 'GRID'
    ISNI = 'ISNI'
    URL = 'URL'
    DOI = 'DOI'
    Handle = 'Handle'
    String = 'String'


class Identifier(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    identifierValue: Annotated[
        Optional[str],
        Field(description='(Optional) - String containing the value of an identifier'),
    ] = None
    identifierType: Annotated[
        Optional[IdentifierType1],
        Field(
            description='(Optional) - Type of the identifier to be selected from: *ROR *GRID *ISNI *URL *DOI *Handle *String'
        ),
    ] = None


class Unit(Enum):
    Pa = 'Pa'
    hPa = 'hPa'
    kPa = 'kPa'
    MPa = 'MPa'
    GPa = 'GPa'
    mbar = 'mbar'
    bar = 'bar'
    psi = 'psi'


class PressureDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float], Field(description='(Required) - Value of the pressure.')
    ] = None
    unit: Annotated[
        Optional[Unit],
        Field(
            description='(Optional) - Unit of the value to be selected from a controlled list (Pa, hPa, kPa, MPa, GPa, mbar, bar, psi).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Qualifier to describe the value (e.g., average, maximum, minimum).'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class Unit1(Enum):
    degree = 'degree'
    radian = 'radian'


class AngleDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(
            description='(Required) - The angle expressed as an integer or floating point value.'
        ),
    ] = None
    unit: Annotated[
        Optional[Unit1],
        Field(
            description='(Optional) - the unit of the value to be selected from a controlled list (degree, radian).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class Unit2(Enum):
    nm = 'nm'
    um = 'um'
    mm = 'mm'
    cm = 'cm'
    m = 'm'


class DistanceDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(description='(Required) - Value of the distance, size or length.'),
    ] = None
    unit: Annotated[
        Optional[Unit2],
        Field(
            description='(Optional) - Unit of the value to be selected from a controlled list (nm, µm, mm, cm, m).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Qualifier to describe the value (e.g., average, maximum, minimum).'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class Unit3(Enum):
    K = 'K'
    ºC = 'ºC'
    ºF = 'ºF'


class TemperatureDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float], Field(description='(Required) - Value of the temperature.')
    ] = None
    unit: Annotated[
        Optional[Unit3],
        Field(
            description='(Optional) - Unit of the value to be selected from a controlled list (K, ºC, ºF).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Qualifier to describe the value (e.g., average, maximum, minimum).'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class Unit4(Enum):
    pA = 'pA'
    nA = 'nA'
    µA = 'µA'
    mA = 'mA'
    A = 'A'


class CurrentDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float], Field(description='(Required) - Value of the current.')
    ] = None
    unit: Annotated[
        Optional[Unit4],
        Field(
            description='(Optional) - Unit of the value to be selected from a controlled list (pA, nA, µA, mA, A).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Qualifier to describe the value (e.g., average, maximum, minimum).'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class Program(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    programName: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Name of the program (or software) used for acquisition'
        ),
    ] = None
    programVersion: Annotated[
        Optional[str],
        Field(description='(Optional) - Program (or software) version number'),
    ] = None


class BeamType(Enum):
    EBeam = 'EBeam'
    IBeam = 'IBeam'


class IdentifierModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    identifierValue: Annotated[
        Optional[str],
        Field(description='(Optional) - String containing the value of an identifier'),
    ] = None
    identifierType: Annotated[
        Optional[IdentifierType1],
        Field(
            description='(Optional) - Type of the identifier to be selected from: *ROR *GRID *ISNI *URL *DOI *Handle *String'
        ),
    ] = None


class LensMode(Enum):
    Field_Free = 'Field-Free'
    Immersion = 'Immersion'
    EDS = 'EDS'


class ScanType(Enum):
    EScan = 'EScan'
    IScan = 'IScan'


class DetectorType(Enum):
    ETD = 'ETD'
    CDEM = 'CDEM'
    CBS = 'CBS'
    ECD = 'ECD'
    External = 'External'
    GBSD = 'GBSD'
    GSED = 'GSED'
    ICE = 'ICE'
    LFD = 'LFD'
    LVD = 'LVD'
    LVSED = 'LVSED'
    None_ = 'None'
    STEM3 = 'STEM3'
    STEM3_GMode = 'STEM3_GMode'
    STEM4 = 'STEM4'
    T1 = 'T1'
    T2 = 'T2'
    T3 = 'T3'
    TLD = 'TLD'


class Signal(Enum):
    SE = 'SE'
    BSE = 'BSE'
    SI = 'SI'


class PixelNumberType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    xPixels: Annotated[
        Optional[float],
        Field(
            description='(Required) - no. of pixels in horizontal direction of datatype number'
        ),
    ] = None
    yPixels: Annotated[
        Optional[float],
        Field(
            description='(Required) - no. of pixels in vertical direction of datatype number'
        ),
    ] = None


class Unit5(Enum):
    abohm = 'abohm'
    ohm = 'ohm'
    k_ohm = 'k ohm'
    M_ohm = 'M ohm'


class ResistanceDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(
            description='(Required) - The resistance expressed as an integer or floating point value.'
        ),
    ] = None
    unit: Annotated[
        Optional[Unit5],
        Field(
            description='(Optional) - the unit of the value to be selected from a controlled list (abohm, ohm, k ohm, M ohm).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    notes: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Further notes about the value of datatype string'
        ),
    ] = None


class Unit6(Enum):
    µW = 'µW'
    mW = 'mW'
    W = 'W'
    kW = 'kW'
    MW = 'MW'


class PowerDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(
            description='(Required) - The power expressed as an integer or floating point value.'
        ),
    ] = None
    unit: Annotated[
        Optional[Unit6],
        Field(
            description='(Optional) - the unit of the value to be selected from a controlled list (µW, mW, W, kW, MW).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    notes: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Further notes about the value of datatype string'
        ),
    ] = None


class Unit7(Enum):
    uV = 'uV'
    mV = 'mV'
    V = 'V'
    kV = 'kV'
    MV = 'MV'


class VoltageDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(
            description='(Required) - The voltage expressed as an integer or floating point value.'
        ),
    ] = None
    unit: Annotated[
        Optional[Unit7],
        Field(
            description='(Optional) - the unit of the value to be selected from a controlled list (uV, mV, V, kV, MV, GV).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    notes: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Further notes about the value of datatype string'
        ),
    ] = None


class Unit8(Enum):
    pA = 'pA'
    nA = 'nA'
    uA = 'uA'
    mA = 'mA'
    A = 'A'


class CurrentDetailsModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(description='(Optional) - Further notes about the value.'),
    ] = None
    unit: Annotated[
        Optional[Unit8],
        Field(
            description='(Optional) - the unit of the value to be selected from a controlled list (pA, nA, uA, mA, A).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class Unit9(Enum):
    Pa = 'Pa'
    hPa = 'hPa'
    kPa = 'kPa'
    MPa = 'MPa'
    GPa = 'GPa'
    mbar = 'mbar'
    bar = 'bar'
    psi = 'psi'


class PressureDetails1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float], Field(description='(Required) - Value of the pressure.')
    ] = None
    unit: Annotated[
        Optional[Unit9],
        Field(
            description='(Optional) - Unit of the value to be selected from a controlled list (Pa, hPa, kPa, MPa, GPa, mbar, bar, psi).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Qualifier to describe the value (e.g., average, maximum, minimum).'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class Unit10(Enum):
    degree = 'degree'
    radian = 'radian'


class AngleDetailsModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(
            description='(Required) - The angle expressed as an integer or floating point value.'
        ),
    ] = None
    unit: Annotated[
        Optional[Unit10],
        Field(
            description='(Unit) - the unit of the value to be selected from a controlled list (degree, radian).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    notes: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Further notes about the value of datatype string'
        ),
    ] = None


class Unit11(Enum):
    nm = 'nm'
    um = 'um'
    mm = 'mm'
    cm = 'cm'
    m = 'm'


class DistanceDetailsModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(description='(Required) - Value of the distance, size or length.'),
    ] = None
    unit: Annotated[
        Optional[Unit11],
        Field(
            description='(Optional) - Unit of the value to be selected from a controlled list (nm, µm, mm, cm, m).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Qualifier to describe the value (e.g., average, maximum, minimum).'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class Unit12(Enum):
    K = 'K'
    ºC = 'ºC'
    ºF = 'ºF'


class TemperatureDetailsModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float], Field(description='(Required) - Value of the temperature.')
    ] = None
    unit: Annotated[
        Optional[Unit12],
        Field(
            description='(Optional) - Unit of the value to be selected from a controlled list (K, ºC, ºF).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Qualifier to describe the value (e.g., average, maximum, minimum).'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class Unit13(Enum):
    nJ = 'nJ'
    mJ = 'mJ'
    J = 'J'
    kJ = 'kJ'
    eV = 'eV'
    meV = 'meV'


class EnergyDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(
            description='(Required) - The energy expressed as an integer or floating point value'
        ),
    ] = None
    unit: Annotated[
        Optional[Unit13],
        Field(
            description='(Optional) - the unit of the value to be selected from a controlled list (nJ, mJ, J, kJ, eV, meV).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    notes: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Further notes about the value of datatype string'
        ),
    ] = None


class Unit14(Enum):
    ps = 'ps'
    ns = 'ns'
    us = 'us'
    ms = 'ms'
    s = 's'


class TimeDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(
            description='(Required) - The time expressed as an integer or floating point value.'
        ),
    ] = None
    unit: Annotated[
        Optional[Unit14],
        Field(
            description='(Optional) - the unit of the value to be selected from a controlled list (ps, ns, us, ms, s).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    notes: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Further notes about the value of datatype string'
        ),
    ] = None


class IdentifierModel1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    identifierValue: Annotated[
        Optional[str],
        Field(description='(Optional) - String containing the value of an identifier'),
    ] = None
    identifierType: Annotated[
        Optional[IdentifierType1],
        Field(
            description='(Optional) - Type of the identifier to be selected from: *ROR *GRID *ISNI *URL *DOI *Handle *String'
        ),
    ] = None


class Unit15(Enum):
    nm = 'nm'
    um = 'um'
    mm = 'mm'
    cm = 'cm'
    m = 'm'


class DistanceDetailsModel1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(description='(Required) - Value of the distance, size or length.'),
    ] = None
    unit: Annotated[
        Optional[Unit15],
        Field(
            description='(Optional) - Unit of the value to be selected from a controlled list (nm, µm, mm, cm, m).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Qualifier to describe the value (e.g., average, maximum, minimum).'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class Unit16(Enum):
    pA = 'pA'
    nA = 'nA'
    uA = 'uA'
    mA = 'mA'
    A = 'A'


class CurrentDetailsModel1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(description='(Optional) - Further notes about the value.'),
    ] = None
    unit: Annotated[
        Optional[Unit16],
        Field(
            description='(Optional) - the unit of the value to be selected from a controlled list (pA, nA, uA, mA, A).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class Unit17(Enum):
    degree = 'degree'
    radian = 'radian'


class AngleDetailsModel1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(
            description='(Required) - The angle expressed as an integer or floating point value.'
        ),
    ] = None
    unit: Annotated[
        Optional[Unit17],
        Field(
            description='(Optional) - the unit of the value to be selected from a controlled list (degree, radian).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min)'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class GenericMetadata(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    technique: Annotated[
        Optional[str],
        Field(
            description='(Required) - Any experimental, theoretical or computational method used during Data Acquisition or during any of the processes included in the Data Analysis Lifecycle to acquire, process or analyse Research Data about a System or a set of them with an Instrument, which is used to generate this metadata.'
        ),
    ] = None
    measurementPurpose: Annotated[
        Optional[MeasurementPurpose],
        Field(
            description='(Required) - Measurement is experimental Data Acquisition, typically performed on a Sample using an experimental Technique. It may also be performed during Fabrication or Sample Preparation, e.g., to characterise the intermediate stages and/or the final resulting Precursor(s) or Sample(s), respectively. A Measurement may require the use of Consumables.'
        ),
    ] = None
    measurementDescription: Annotated[
        Optional[str],
        Field(description='(Optional) - Description about the measurement.'),
    ] = None
    equipment: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Any kind of physical or virtual item, device, machine or other tools used to perform one or more Fabrication(s), Sample Preparation(s), Model Preparation(s), Data Acquisition(s) and/or any of the processes included in the Data Analysis Lifecycle. Usually, the Equipment is located in a Laboratory hosted by an Institution and/or can be virtually or remotely accessed. Equipment is usually an investment. According to this definition, an Instrument is a particular type of Equipment.'
        ),
    ] = None
    consumables: Annotated[
        Optional[List[str]],
        Field(
            description='(Optional) - Auxiliary entity used during Fabrication, Sample Preparation or Measurement which has a limited time capacity or is limited in its number of uses before it is disposed of, necessary to the process itself and normally bought from third party manufacturers. Examples are: gloves, syringes, wipes, etching solutions, glass slides, spatulas, weighing paper, two-sided tape.',
            min_length=1,
        ),
    ] = None
    parents: Annotated[
        Optional[List[Parent]],
        Field(
            description='(Required) - Parents of this metadata like the metadata document of the sample with which the measurement was performed.',
            min_length=1,
        ),
    ] = None
    program: Annotated[
        Optional[Program],
        Field(
            description='(Optional)- Details concerning the program (or software) used for aquisition'
        ),
    ] = None
    applicationID: Annotated[
        Optional[IdentifierModel1],
        Field(
            description='(Optional)- Details concerning the program (or software) used for aquisition'
        ),
    ] = None
    fileVersion: Annotated[
        Optional[str],
        Field(description='The file version of the measurement data of the project'),
    ] = None
    projectName: Annotated[
        Optional[str],
        Field(description='The name of the project containing the acquistion datasets'),
    ] = None
    projectID: Annotated[
        Optional[IdentifierModel1],
        Field(
            description='(Optional)- Details concerning the program (or software) used for aquisition'
        ),
    ] = None
    projectDescription: Annotated[
        Optional[str],
        Field(
            description='Description about the project containing the acquistion datasets'
        ),
    ] = None
    userDescription: Annotated[
        Optional[str],
        Field(
            description='Additional description provided by the user about the measurement or the sample'
        ),
    ] = None
    zCutSpacing: Annotated[
        Optional[DistanceDetailsModel1],
        Field(description='The spacing between individual slices in z dimension'),
    ] = None
    millingLocationHeight: Annotated[
        Optional[DistanceDetailsModel1],
        Field(
            description='The total height of the area which is cut into slices in the z dimension'
        ),
    ] = None
    millingLocationWidth: Annotated[
        Optional[DistanceDetailsModel1],
        Field(
            description='The total width of the area which is cut into slices in the x dimension'
        ),
    ] = None
    millingLocationDepth: Annotated[
        Optional[DistanceDetailsModel1],
        Field(
            description='The total width of the area which is cut into slices in the y dimension'
        ),
    ] = None
    millingLocationX: Annotated[
        Optional[DistanceDetailsModel1],
        Field(
            description='X coordinate begin of the milling location from the origin.'
        ),
    ] = None
    millingLocationY: Annotated[
        Optional[DistanceDetailsModel1],
        Field(
            description='Y coordinate of the begin of the milling location from the origin.'
        ),
    ] = None
    millingMaterial: Annotated[
        Optional[str], Field(description='Material which is milled')
    ] = None
    millingCurrent: Annotated[
        Optional[CurrentDetailsModel1],
        Field(
            description='The total height of the area which is cut into slices in the z dimension. IRI: https://purls.helmholtz-metadaten.de/EMG/00000003'
        ),
    ] = None
    numberOfCuts: Annotated[
        Optional[float],
        Field(
            description='The number of slices into which the sample is cut during the course of the SEM/FIB Tomography'
        ),
    ] = None
    pump: Annotated[
        Optional[str], Field(description='The name of the pump used in the instrument')
    ] = None
    column: Annotated[
        Optional[str],
        Field(description='The name of the column used in the instrument'),
    ] = None
    source: Annotated[
        Optional[str],
        Field(
            description='The type of the source used in the instrument. The source is a physical part of an electron or ion microscope from which the particles that form the beam are emitted. IRI: https://purls.helmholtz-metadaten.de/EMG/00000021'
        ),
    ] = None
    eucentricWorkingDistance: Annotated[
        Optional[DistanceDetailsModel1],
        Field(
            description='The Working Distance when the smaple is at the eucentric height'
        ),
    ] = None
    ESEM: Annotated[
        Optional[bool],
        Field(description='To be set to true if environmental SEM is used'),
    ] = None
    systemType: Annotated[
        Optional[str],
        Field(
            description='Describes the system type used - the name of the instrument'
        ),
    ] = None
    angleToEBeam: Annotated[
        Optional[AngleDetailsModel1],
        Field(
            description='(Optional) - angle between e-beam and i-beam defined separately as angleDetails (Allowed units: degree, radian). It is specified by the manufacturer and a property of the geometry of the instrument.'
        ),
    ] = None
    stage: Annotated[
        Optional[str],
        Field(description='The dimensions of the stage used in the instrument'),
    ] = None


class Stage(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    workingDistance: Annotated[
        Optional[DistanceDetails],
        Field(
            description='(Required)- Distance which is determined along the optical axis within the column from  (1) the lower end of the final optical element between the source and the  specimen stage; to (2) the point where the beam is focused. IRI: https://purls.helmholtz-metadaten.de/EMG/00000026'
        ),
    ] = None
    stageX: Annotated[
        Optional[DistanceDetails],
        Field(description='(Required)- X coordinate of the position of the stage'),
    ] = None
    stageY: Annotated[
        Optional[DistanceDetails],
        Field(description='(Required)- Y coordinate of the position of the stage'),
    ] = None
    stageZ: Annotated[
        Optional[DistanceDetails],
        Field(description='(Required)- Z coordinate of the position of the stage'),
    ] = None
    stageM: Annotated[
        Optional[DistanceDetails],
        Field(
            description='(Optional)- M coordinate of the position of the stage (additional translation axis available in Zeiss instruments)'
        ),
    ] = None
    stageR: Annotated[
        Optional[AngleDetails],
        Field(description='(Required)- Angle by which the stage is rotated'),
    ] = None
    stageTa: Annotated[
        Optional[AngleDetails],
        Field(description='(Required)- Tilt angle alpha of the stage'),
    ] = None
    stageTb: Annotated[
        Optional[AngleDetails],
        Field(description='(Required)- Tilt angle beta of the stage'),
    ] = None
    specTilt: Annotated[
        Optional[AngleDetails],
        Field(
            description='(Optional)- Pretilt of the sample, usually due to pretilted holder.'
        ),
    ] = None
    activeStage: Annotated[
        Optional[str], Field(description='(Required)- Describes the stage in use')
    ] = None


class Vacuum(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    chamberPressure: Annotated[
        Optional[PressureDetails],
        Field(
            description='(Required)- The pressure maintained in the electron chamber'
        ),
    ] = None
    gas: Annotated[
        Optional[str],
        Field(description='(Required)- The gas used in the electron chamber'),
    ] = None
    userMode: Annotated[
        Optional[UserMode],
        Field(description='(Required)- The type of vacuum slected by the user'),
    ] = None
    humidity: Annotated[
        Optional[str],
        Field(
            description='(Required)- Describes the humidity in the chamber during the measurement'
        ),
    ] = None


class ApertureSetting(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    size: Annotated[
        Optional[DistanceDetailsModel],
        Field(
            description='(Optional) - the size (diameter) of the aperture which can be directly controlled using the instrument settings defined separately as distanceDetails.'
        ),
    ] = None
    current: Annotated[
        Optional[CurrentDetailsModel],
        Field(
            description='(Optional) - the beam current setting which would indirectly control the size of the aperture defined separately as currentDetails'
        ),
    ] = None


class EBeamDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accelerationVoltage: Annotated[
        Optional[VoltageDetails],
        Field(
            description='(Required) - The potential difference between anode and cathode. The acceleration voltage adds kinetic energy to the particles of the beam. IRI: https://purls.helmholtz-metadaten.de/EMG/00000001 It is defined separately as voltageDetails, (includes the voltage value, optional qualifier like max or min, optional note of the type string, and a controlled list of units from which one can be chosen - uV, mv, V, kV, MV)'
        ),
    ] = None
    beamCurrent: Annotated[
        Optional[CurrentDetailsModel],
        Field(
            description='(Optional) - Electrical current which flows along the beam path. IRI: https://purls.helmholtz-metadaten.de/EMG/00000003 It is defined separately as currentDetails (includes the current value, optional qualifier like max or min, optional note of the type string, and a controlled list of units from which one can be chosen - pA, nA, uA, mA, A, kA).'
        ),
    ] = None
    scanRotation: Annotated[
        Optional[AngleDetailsModel],
        Field(
            description='(Required) - Angle by which beam scanning direction is rotated'
        ),
    ] = None
    imageMode: Annotated[
        Optional[str],
        Field(
            description='(Optional) - The type of image mode used. Could be a text or number depending on the instrument.'
        ),
    ] = None
    apertureSetting: Annotated[
        Optional[ApertureSetting],
        Field(
            description='(Required) - The setting for controlling the aperture size, using either the aperture size directly or indirectly using the beam current. Therefore one of the two properties must be selected: size or current.'
        ),
    ] = None
    horizontalFieldWidth: Annotated[
        Optional[DistanceDetailsModel],
        Field(
            description='(Required) - the actual horizontal length scanned on the sample defined separately as distanceDetails.'
        ),
    ] = None
    verticalFieldWidth: Annotated[
        Optional[DistanceDetailsModel],
        Field(
            description='(Required) - the actual vertical length scanned on the sample defined separately as distanceDetails.'
        ),
    ] = None
    tiltCorrectionIsOn: Annotated[
        Optional[bool],
        Field(
            description='(Optional) - To bet set true if tilt correction is on. IRI:https://purls.helmholtz-metadaten.de/emg/00000037'
        ),
    ] = None
    dynamicFocusIsOn: Annotated[
        Optional[bool],
        Field(
            description='(Optional) - To bet set true if dynamic focus is on. IRI:https://purls.helmholtz-metadaten.de/emg/00000039'
        ),
    ] = None
    dynamicWDIsOn: Annotated[
        Optional[bool],
        Field(
            description='(Optional) - To bet set true if dynamic working distance is on. IRI: https://purls.helmholtz-metadaten.de/EMG/00000026'
        ),
    ] = None
    lensMode: Annotated[
        Optional[LensMode],
        Field(description='(Optional) - The type of image mode used'),
    ] = None
    tiltCorrectionAngle: Annotated[
        Optional[AngleDetailsModel],
        Field(
            description='(Optional) - If the sample is tilted, the image is compressed in the vertical direction, i.e. the pixels are not isotropic anymore. Tilt correction adapts the line spacing of the scanning to compensate for this. IRI:https://purls.helmholtz-metadaten.de/emg/00000037'
        ),
    ] = None
    preTilt_: Annotated[
        Optional[AngleDetailsModel],
        Field(
            alias='preTilt ',
            description='(Optional) - Sometimes, pre-tilted holders are used and the pretilt angle must be given in the acquisition software because actual tilt = stage tilt plus pretilt.',
        ),
    ] = None
    magnificationCorrection: Annotated[
        Optional[bool],
        Field(
            description='(Optional) - To bet set true if magnification correction is on'
        ),
    ] = None


class IBeamDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accelerationVoltage: Annotated[
        Optional[VoltageDetails],
        Field(
            description='(Required) - The potential difference between anode and cathode. The acceleration voltage adds kinetic energy to the particles of the beam. IRI:https://purls.helmholtz-metadaten.de/EMG/00000001 It is defined separately as voltageDetails, (includes the voltage value, optional qualifier like max or min, optional note of the type string, and a controlled list of units from which one can be chosen - uV, mv, V, kV, MV)'
        ),
    ] = None
    millingCurrent: Annotated[
        Optional[CurrentDetailsModel],
        Field(
            description='(Optional) - Electrical current used in SEM-FIB Tomography to mill/cut the sample. In this case this is the same as the beam current of the ion beam. IRI: https://purls.helmholtz-metadaten.de/EMG/00000003 It is defined separately as currentDetails (includes the current value, optional qualifier like max or min, optional note of the type string, and a controlled list of units from which one can be chosen - pA, nA, uA, mA, A, kA).'
        ),
    ] = None


class EScan(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mainsLock: Annotated[
        Optional[bool],
        Field(description='(Optional) - To bet set true if mains lock is on'),
    ] = None
    lineTime: Annotated[
        Optional[TimeDetails],
        Field(
            description='(Optional) -Time period during which a line is fully scanned.'
        ),
    ] = None
    lineIntegration: Annotated[
        Optional[float], Field(description='(Optional) - Number of lines integrated')
    ] = None
    lineAveraging: Annotated[
        Optional[float], Field(description='(Optional) - Number of lines averaged')
    ] = None
    scanInterlacing: Annotated[
        Optional[float],
        Field(
            description='(Optional) - Number of scans interlaced. This setting splits an imaging area into blocks defined by the number of lines (from 2 to 8). In the first instance, the first line of each block is scanned, then the second one, etc. This imaging method significantly reduces charging.'
        ),
    ] = None


class ScanDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    scanType: Annotated[
        Optional[ScanType],
        Field(description='(Optional) - The type of scan E-Scan or I-Scan'),
    ] = None
    dwellTime: Annotated[
        Optional[TimeDetails],
        Field(
            description='(Required) - Time period during which the beam remains on one position/stationary. IRI: https://purls.helmholtz-metadaten.de/EMG/00000006 '
        ),
    ] = None
    internalScan: Annotated[
        Optional[bool],
        Field(description='(Optional) - To bet set true if internal scan is on'),
    ] = None
    pixelWidth: Annotated[
        Optional[DistanceDetailsModel],
        Field(description='(Required) - the actual width of a pixel'),
    ] = None
    pixelHeight: Annotated[
        Optional[DistanceDetailsModel],
        Field(description='(Required) - the actual width of a pixel'),
    ] = None
    horizontalFieldSize: Annotated[
        Optional[DistanceDetailsModel],
        Field(
            description='(Optional) -  the actual horizontal length scanned on the sample defined separately as distanceDetails'
        ),
    ] = None
    verticalFieldSize: Annotated[
        Optional[DistanceDetailsModel],
        Field(
            description='(Optional) -  the actual vertical length scanned on the sample defined separately as distanceDetails'
        ),
    ] = None
    average: Annotated[
        Optional[float],
        Field(description='(Optional) - Number of images averaged at each slice'),
    ] = None
    integrate: Annotated[
        Optional[float],
        Field(description='(Optional) - Number of images integrated at each slice'),
    ] = None
    frameTime: Annotated[
        Optional[TimeDetails],
        Field(
            description='(Optional) -Time period during which a frame is fully scanned. IRI: https://purls.helmholtz-metadaten.de/EMG/00000014 '
        ),
    ] = None
    eScan: Annotated[
        Optional[EScan],
        Field(description='gives settings pertaining to electron beam scan'),
    ] = None


class ImageDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    digitalContrast: Annotated[
        Optional[float],
        Field(
            description='(Required) - A number indicating the setting for digital contrast (a basic post-processing method)'
        ),
    ] = None
    digitalBrightness: Annotated[
        Optional[float],
        Field(
            description='(Required) - A number indicating the setting for digital brightness (a basic post-processing method)'
        ),
    ] = None
    digitalGamma: Annotated[
        Optional[float],
        Field(
            description='(Required) - A number indicating the setting for digital Gamma (a basic post-processing method)'
        ),
    ] = None
    numberOfPixels: Annotated[
        Optional[PixelNumberType],
        Field(
            description='(Required) - The number of x, y pixels of the image (Resolution), defined separately as pixelNumberType with separate entries for integer values of xPixels and yPixels'
        ),
    ] = None
    driftcorrected: Annotated[
        Optional[bool],
        Field(description='(Required) - To bet set true if drift correction is on'),
    ] = None
    zoomfactor: Annotated[
        Optional[float],
        Field(description='(Required) - A number indicating the zoom factor'),
    ] = None
    postprocessing: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Describes the post-processing performed on the image'
        ),
    ] = None
    transformation: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Describes the transformations performed on the image'
        ),
    ] = None


class DetectorSettings(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    contrast: Annotated[
        Optional[float],
        Field(description='(Optional) - A number indicating the contrast'),
    ] = None
    brightness: Annotated[
        Optional[float],
        Field(description='(Optional) - A number indicating the brightness'),
    ] = None
    mix: Annotated[
        Optional[float],
        Field(
            description='(Optional) - Signals from different detectors can be overlaid (mixed) and this should, in theory, be the percentage of this detectors contribution to the end result.'
        ),
    ] = None
    signal: Annotated[
        Optional[Signal],
        Field(description='(Optional) - The signal used for detection'),
    ] = None
    grid: Annotated[
        Optional[float],
        Field(
            description='(Optional) - A number indicating the number of grid elements'
        ),
    ] = None
    gridVoltage: Annotated[
        Optional[VoltageDetails],
        Field(description='(Optional) - Voltage applied to the grid '),
    ] = None
    contrastdB: Annotated[
        Optional[float], Field(description='(Optional) - Describes the contrast in dB')
    ] = None
    brightnessdB: Annotated[
        Optional[float],
        Field(description='(Optional) - Describes the brightness in dB'),
    ] = None
    setting: Annotated[
        Optional[float],
        Field(
            description='(Optional) - In case of ETD, this is the bias voltage applied to the detector grid. Note that this block looks different for different detectors. '
        ),
    ] = None
    frontEndVoltage: Annotated[
        Optional[VoltageDetails],
        Field(
            description='(Optional) - Bias voltage applied to the front end of the detector '
        ),
    ] = None
    enhancedContrast: Annotated[
        Optional[float],
        Field(description='(Optional) - Describes the enhancement in contrast'),
    ] = None
    minimumDwellTime: Annotated[
        Optional[TimeDetails],
        Field(
            description='(Optional) - Minimum possible dwell time for the detector. IRI: https://purls.helmholtz-metadaten.de/EMG/00000006 '
        ),
    ] = None


class HotStageMEMSDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    heatingCurrent: Annotated[
        Optional[CurrentDetailsModel],
        Field(
            description='(Optional) - Describes the heating current used in the hot stage MEMS'
        ),
    ] = None
    heatingVoltage: Annotated[
        Optional[VoltageDetails],
        Field(
            description='(Optional) - Describes the heating voltage used in the hot stage MEMS'
        ),
    ] = None
    targetTemperature: Annotated[
        Optional[TemperatureDetailsModel],
        Field(
            description='(Optional) - Describes the target Temperature set in the hot stage MEMS'
        ),
    ] = None
    actualTemperature: Annotated[
        Optional[TemperatureDetailsModel],
        Field(
            description='(Optional) - Describes the actual Temperature measured in the hot stage MEMS'
        ),
    ] = None
    heatingPower: Annotated[
        Optional[PowerDetails],
        Field(
            description='(Optional) - Describes the heating power used in the hot stage MEMS'
        ),
    ] = None
    sampleBias: Annotated[
        Optional[VoltageDetails],
        Field(
            description='(Optional) - Describes the bias voltage applied to the sample in the hot stage MEMS'
        ),
    ] = None
    sampleResistance: Annotated[
        Optional[ResistanceDetails],
        Field(
            description='(Optional) - Describes the target Temperature used in the hot stage MEMS'
        ),
    ] = None


class SEMFIBTomographyAcquisitionImageSchema(BaseModel):
    entryID: Annotated[
        Optional[Identifier],
        Field(
            description='(Optional)- Identifier of the image produced by the machine'
        ),
    ] = None
    fileName: Annotated[
        Optional[str], Field(description='(Optional)- File name of the image')
    ] = None
    fileLink: Annotated[
        Optional[Identifier],
        Field(description='(Optional)- Link to the location of the image'),
    ] = None
    creationTime: Annotated[
        Optional[str],
        Field(
            description='(Required)- Time of creation of the image',
            pattern='^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z?)$',
        ),
    ] = None
    definition: Annotated[
        Optional[str],
        Field(
            description='(Optional)- Name of the schema to which this entry conforms. In this case, acquisition_image should be written'
        ),
    ] = None
    stage: Annotated[
        Optional[Stage],
        Field(
            description='(Required)- Details concerning stage settings used for aquisition'
        ),
    ] = None
    vacuum: Annotated[
        Optional[Vacuum],
        Field(
            description='(Required)- Details concerning the vacuum during aquisition'
        ),
    ] = None
    temperature: Annotated[
        Optional[TemperatureDetails],
        Field(description='(Optional)- Temperature of the sample during acquisition'),
    ] = None
    specimenCurrent: Annotated[
        Optional[CurrentDetails],
        Field(
            description='(Optional)- Current measured on the specimen during acquisition of the image'
        ),
    ] = None


class DetectorDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Annotated[
        Optional[str], Field(description='(Optional) - Name of the detector used')
    ] = None
    detectorType: Annotated[
        Optional[DetectorType],
        Field(description='(Required) - Type of the detector used'),
    ] = None
    detectorSettings: Annotated[
        Optional[DetectorSettings],
        Field(
            description='(Optional) - Settings of the specific detector used. E.g., the Everhart Thornley detector (ETD), is a secondary electron and back-scattered electron detector used in scanning electron microscopes, whihc has then particular settings'
        ),
    ] = None


class Detector(RootModel[Optional[List[DetectorDetails]]]):
    root: Annotated[
        Optional[List[DetectorDetails]],
        Field(
            description='(Required) - Details about the detector(s) used for acquisition.',
            min_length=1,
        ),
    ] = None


class InstrumentDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    beamType: Annotated[
        Optional[BeamType], Field(description='(Required) - The selected beam')
    ] = None
    spot: Annotated[
        Optional[float],
        Field(
            description='(Optional) - Qualitative index for beam current. Varies with current setting, i.e. 1.6 nA is spot = 1, 3.2 nA is spot = 2, 0.1 nA = spot =-3, so it can also be negative. May vary between different microscope models.'
        ),
    ] = None
    eBeam: Annotated[
        Optional[EBeamDetails],
        Field(description='(Optional) - Details about the electron beam'),
    ] = None
    iBeam: Annotated[
        Optional[IBeamDetails],
        Field(description='(Optional) - Details about the ion beam'),
    ] = None
    scan: Annotated[
        Optional[ScanDetails],
        Field(description='(Required) - Details about the scan settings'),
    ] = None
    imaging: Annotated[
        Optional[ImageDetails],
        Field(description='(Optional) - Details about the imaging settings'),
    ] = None
    numberOfDetectors: Annotated[
        Optional[float],
        Field(description='Number of detectors used for the acquisition'),
    ] = None
    detector: Optional[Union[DetectorDetails, Detector]] = None
    hotStageMEMS: Annotated[
        Optional[HotStageMEMSDetails],
        Field(
            description='(Optional) - Pressure maintained inside the chamber (in which the sample is housed) during the measurement'
        ),
    ] = None


class SEMFIBTomographyAcquisitionDatasetSchema(BaseModel):
    entryID: Annotated[
        Optional[IdentifierModel],
        Field(
            description='(Optional)- Identifier of the dataset. It could be the PID of location where the entire dataset is stored'
        ),
    ] = None
    definition: Annotated[
        Optional[str],
        Field(
            description='(Optional)- Name of the schema to which this entry conforms. In this case, acquisition_dataset is to be written'
        ),
    ] = None
    user: Annotated[
        Optional[UserDescription],
        Field(
            description='(Optional)- The contact information of the user responsible for the measurement'
        ),
    ] = None
    program: Annotated[
        Optional[Program],
        Field(
            description='(Required)- Details concerning the program (or software) used for aquisition'
        ),
    ] = None
    instrument: Annotated[
        Optional[InstrumentDetails],
        Field(description='(Required)- Details concerning the instrument settings'),
    ] = None
    datasetType: Annotated[
        Optional[DatasetType],
        Field(
            description='(Optional) - To be selected from the enumerated list depending on the detector and the angle at which the sample is measured: * SEM Image * SEM Image 2 * EDS * EBSD * BSE * ISE * ISI * SI * InLens * SESI'
        ),
    ] = None
    numberOfItems: Annotated[
        Optional[float],
        Field(
            description='(Required) - Number of Items (images, files). Depends on the number of slices'
        ),
    ] = None
    rows: Annotated[
        Optional[float],
        Field(
            description='(Optional) - Number of rows in the tiled image grab setting'
        ),
    ] = None
    columns: Annotated[
        Optional[float],
        Field(
            description='(Optional) - Number of column in the tiled image grab setting'
        ),
    ] = None
    tileColumn: Annotated[
        Optional[float],
        Field(
            description='(Optional) - The selected column in the tiled image grab setting'
        ),
    ] = None
    tileRow: Annotated[
        Optional[float],
        Field(
            description='(Optional) - The selected row in the tiled image grab setting'
        ),
    ] = None
    images: Optional[List[SEMFIBTomographyAcquisitionImageSchema]] = None


class Acquisition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    genericMetadata: Annotated[
        Optional[GenericMetadata],
        Field(
            description='Describes all the generic metadata common to the acquisition'
        ),
    ] = None
    dataset: Annotated[
        Optional[List[SEMFIBTomographyAcquisitionDatasetSchema]],
        Field(
            description='Array of all the dataset-metadata acquired using multiple detectors'
        ),
    ] = None


class AcquisitionMain(BaseModel):
    acquisition: Optional[Acquisition] = None
