# generated by datamodel-codegen:
#   filename:  SEM_schema.json
#   timestamp: 2025-02-24T15:40:26+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Annotated, List, Optional

from pydantic import BaseModel, ConfigDict, EmailStr, Field


class MeasurementPurpose(Enum):
    assessment__to_given_categories_or_values_ = (
        'assessment (to given categories or values)'
    )
    completeness_check__presence_or_absence_of_given_properties_ = (
        'completeness check (presence or absence of given properties)'
    )
    correlative_characterization__dedicated_sample_treatment_to_emphasise_given_features_ = 'correlative characterization (dedicated sample treatment to emphasise given features)'
    exploratory__routine_check_of_known_properties_ = (
        'exploratory (routine check of known properties)'
    )
    feasibility__quick_check__rough_estimate_ = (
        'feasibility (quick check, rough estimate)'
    )
    high_quality_measurement__precise__careful_treatment_ = (
        'high quality measurement (precise, careful treatment)'
    )
    test_specific_hypothesis__focus_only_on_given_aspects_ = (
        'test specific hypothesis (focus only on given aspects)'
    )
    other__please_specify_in_the_comment_ = 'other (please specify in the comment)'


class ParentType(Enum):
    not_applicable = 'not applicable'
    sample = 'sample'


class ParentReferenceType(Enum):
    plain_text = 'plain text'
    external_URL = 'external URL'
    MetaStore_URI = 'MetaStore URI'


class Parent(BaseModel):
    parentType: Optional[ParentType] = 'sample'
    parentReferenceType: Optional[ParentReferenceType] = 'MetaStore URI'
    parentReference: Annotated[
        Optional[str],
        Field(
            description="If type is 'MetaStore URI' it is possible to easily fill this field in a later stage"
        ),
    ] = None


class IdentifierType(Enum):
    ROR = 'ROR'
    GRID = 'GRID'
    ISNI = 'ISNI'
    URL = 'URL'
    DOI = 'DOI'
    Handle = 'Handle'


class Identifier(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    identifierValue: Annotated[
        Optional[str],
        Field(description='(Optional) - String containing the value of an identifier'),
    ] = None
    identifierType: Annotated[
        Optional[IdentifierType],
        Field(
            description='(Optional) - Type of the identifier to be selected from: *ROR *GRID *ISNI *URL *DOI *Handle'
        ),
    ] = None


class Program(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    programName: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Name of the program (or software) used for acquisition'
        ),
    ] = None
    programVersion: Annotated[
        Optional[str],
        Field(description='(Optional) - Program (or software) version number'),
    ] = None


class Revision(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    revisonID: Annotated[
        Optional[Identifier], Field(description='(Optional) - Identifier of the file')
    ] = None
    revisionComment: Annotated[
        Optional[str], Field(description='(Optional)- Any comments to the revision')
    ] = None


class Role(Enum):
    Data_Curator = 'Data Curator'
    Instrument_Scientist = 'Instrument Scientist'
    Team_Leader = 'Team Leader'
    Team_Member = 'Team Member'


class InstitutionDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    institutionName: Annotated[
        Optional[str], Field(description='(Optional) - Full name of the institution')
    ] = None
    institutionAcronym: Annotated[
        Optional[str], Field(description='(Recommended) - Acronym of the institution')
    ] = None
    institutionDepartment: Annotated[
        Optional[str],
        Field(description='(Optional) - Department within an institution'),
    ] = None
    institutionID: Annotated[
        Optional[Identifier],
        Field(
            description='(Optional) - Identifier pertaining to the institution (e.g. ROR)'
        ),
    ] = None


class Unit(Enum):
    fm = 'fm'
    pm = 'pm'
    nm = 'nm'
    µm = 'µm'
    mm = 'mm'
    cm = 'cm'
    m = 'm'


class UncertaintyType(Enum):
    absolute = 'absolute'
    relative = 'relative'


class UncertaintyDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    uncertaintyType: Annotated[
        Optional[UncertaintyType],
        Field(
            description='(Required) - Type of the uncertainty to be chosen between absolute or relative.'
        ),
    ] = None
    value: Annotated[
        Optional[float], Field(description='(Required) - Value of the uncertainty.')
    ] = None


class Unit1(Enum):
    ng = 'ng'
    µg = 'µg'
    mg = 'mg'
    g = 'g'
    kg = 'kg'


class WeightDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float], Field(description='(Required) - Value of the weight.')
    ] = None
    unit: Annotated[
        Optional[Unit1],
        Field(
            description='(Required) - Unit of the value to be selected from a controlled list (ng, µg, mg, g, kg).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Qualifier to describe the value (e.g., average, maximum, minimum).'
        ),
    ] = None
    uncertainty: Annotated[
        Optional[UncertaintyDetails],
        Field(
            description='(Optional) - Uncertainty of the value. Allows to specify whether the uncertainty is absolute or relative.'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class SamplePrepType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    preparationDate: Annotated[
        Optional[date], Field(description='(Optional) - Date of the sample preparation')
    ] = None
    preparationDescription: Annotated[
        Optional[str],
        Field(description='(Optional) - Short description of the sample preparation'),
    ] = None
    preparationID: Annotated[
        Optional[Identifier],
        Field(description='(Optional) - Identifier of the sample preparation'),
    ] = None


class ManufacturerDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    manufacturerName: Annotated[
        Optional[str], Field(description='(Optional) - Name of the manufacturer')
    ] = None
    modelName: Annotated[
        Optional[str], Field(description='(Optional) - Model of the instrument')
    ] = None
    manufacturerID: Annotated[
        Optional[Identifier],
        Field(description='(Optional) - Identifier of the manufacturer'),
    ] = None


class Unit2(Enum):
    Pa = 'Pa'
    hPa = 'hPa'
    kPa = 'kPa'
    MPa = 'MPa'
    GPa = 'GPa'
    mbar = 'mbar'
    bar = 'bar'
    psi = 'psi'


class PressureDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float], Field(description='(Required) - Value of the pressure.')
    ] = None
    unit: Annotated[
        Optional[Unit2],
        Field(
            description='(Required) - Unit of the value to be selected from a controlled list (Pa, hPa, kPa, MPa, GPa, mbar, bar, psi).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Qualifier to describe the value (e.g., average, maximum, minimum).'
        ),
    ] = None
    uncertainty: Annotated[
        Optional[UncertaintyDetails],
        Field(
            description='(Optional) - Uncertainty of the value. Allows to specify whether the uncertainty is absolute or relative.'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class LifetimeDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(
            description='(Required) - The lifetime of the source expressed as an integer or floating point value of datatype number.'
        ),
    ] = None
    unit: Annotated[
        Optional[str],
        Field(description='(Required) - the unit of the value (typical unit - µAh).'),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    uncertainty: Annotated[
        Optional[UncertaintyDetails],
        Field(
            description='(Optional) - Uncertainty in the value defined separately as  uncertaintyDetails, which gives the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number.'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class Unit3(Enum):
    µV = 'µV'
    mV = 'mV'
    V = 'V'
    kV = 'kV'
    MV = 'MV'


class VoltageDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(
            description='(Required) - The voltage expressed as an integer or floating point value of datatype number.'
        ),
    ] = None
    unit: Annotated[
        Optional[Unit3],
        Field(
            description='(Required) - the unit of the value to be selected from a controlled list (µV, mV, V, kV, MV, GV).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    uncertainty: Annotated[
        Optional[UncertaintyDetails],
        Field(
            description='(Optional) - Uncertainty in the value defined separately as  uncertaintyDetails, which gives the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number.'
        ),
    ] = None
    notes: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Further notes about the value of datatype string'
        ),
    ] = None


class Unit4(Enum):
    pA = 'pA'
    nA = 'nA'
    µA = 'µA'
    mA = 'mA'
    A = 'A'


class CurrentDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(description='(Optional) - Further notes about the value.'),
    ] = None
    unit: Annotated[
        Optional[Unit4],
        Field(
            description='(Required) - the unit of the value to be selected from a controlled list (pA, nA, uA, mA, A).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    uncertainty: Annotated[
        Optional[UncertaintyDetails],
        Field(
            description='(Optional) - Uncertainty in the value defined separately as  uncertaintyDetails, which gives the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number.'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class Unit5(Enum):
    degree = 'degree'
    radian = 'radian'


class AngleDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(
            description='(Required) - The angle expressed as an integer or floating point value.'
        ),
    ] = None
    unit: Annotated[
        Optional[Unit5],
        Field(
            description='(Required) - the unit of the value to be selected from a controlled list (degree, radian).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, mi).'
        ),
    ] = None
    uncertainty: Annotated[
        Optional[UncertaintyDetails],
        Field(
            description='(Optional) - Uncertainty in the value defined separately as uncertaintyDetails, which gives the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number.'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class NoiseReduction(Enum):
    Pixel_Avg = 'Pixel Avg'
    Line_Avg = 'Line Avg'
    Frame_Avg = 'Frame Avg'
    Pixel_Int = 'Pixel Int'
    Line_Int = 'Line Int'
    Frame_Int = 'Frame Int'


class CoordinatesUnit(Enum):
    nm = 'nm'
    µm = 'µm'
    mm = 'mm'
    cm = 'cm'
    m = 'm'


class CoordinateSet(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    xValue: Annotated[
        Optional[float], Field(description='(Optional) - value of the x coordinate.')
    ] = None
    xUncertainty: Annotated[
        Optional[UncertaintyDetails],
        Field(description='(Optional) - uncertainty in the x value.'),
    ] = None
    yValue: Annotated[
        Optional[float], Field(description='(Optional) - value of the y coordinate.')
    ] = None
    yUncertainty: Annotated[
        Optional[UncertaintyDetails],
        Field(description='(Optional) -uncertainty in the y value.'),
    ] = None
    zValue: Annotated[
        Optional[float], Field(description='(Optional) - value of the z coordinate.')
    ] = None
    zUncertainty: Annotated[
        Optional[UncertaintyDetails],
        Field(description='(Optional) -uncertainty in the z value.'),
    ] = None
    coordinatesUnit: Annotated[
        Optional[CoordinatesUnit],
        Field(
            description='(Optional) - unit of the coordinates (allowed units - nm, µm, mm, cm, m)'
        ),
    ] = None


class PixelNumberType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    xPixels: Annotated[
        Optional[float],
        Field(
            description='(Required) - no. of pixels in horizontal direction of datatype number'
        ),
    ] = None
    yPixels: Annotated[
        Optional[float],
        Field(
            description='(Required) - no. of pixels in vertical direction of datatype number'
        ),
    ] = None


class PixelSizeDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(
            description='(Required) - The pixel-size expressed as an integer or floating point value.'
        ),
    ] = None
    unit: Annotated[
        Optional[str],
        Field(
            description='(Required) - the unit of the value (typical unit - nm/pixel).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    uncertainty: Annotated[
        Optional[UncertaintyDetails],
        Field(
            description='(Optional) - Uncertainty in the value defined as a complex type uncertaintyDetails, which gives the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number.'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class Unit6(Enum):
    ps = 'ps'
    ns = 'ns'
    µs = 'µs'
    ms = 'ms'
    s = 's'
    min = 'min'
    hr = 'hr'


class TimeDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(
            description='(Required) - The time expressed as an integer or floating point value of datatype number.'
        ),
    ] = None
    unit: Annotated[
        Optional[Unit6],
        Field(
            description='(Required) - the unit of the value to be selected from a controlled list.'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    uncertainty: Annotated[
        Optional[UncertaintyDetails],
        Field(
            description='(Optional) - Uncertainty in the value defined as a complex type uncertaintyDetails, which gives the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number.'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class VoxelDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(
            description='(Required) - The voxel-size expressed as an integer or floating point value.'
        ),
    ] = None
    unit: Annotated[
        Optional[str], Field(description='(Required) - the unit of the value.')
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    uncertainty: Annotated[
        Optional[UncertaintyDetails],
        Field(
            description='(Optional) - Uncertainty in the value defined as a complex type uncertaintyDetails, which gives the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number.'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class DetectorDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    detectorType: Annotated[
        Optional[str],
        Field(
            description='(Optional) - The type of detector (e.g., surface electron detection,  secondary electron, back-scattered electron) of datatype string'
        ),
    ] = 'Secondary Electron'
    detectorName: Annotated[
        Optional[str],
        Field(description='(Required) -Name of the detector of datatype string'),
    ] = None
    detectorID: Annotated[
        Optional[Identifier],
        Field(description='(Optional) - Identifier for the detector'),
    ] = None
    detectorManufacturer: Annotated[
        Optional[ManufacturerDetails],
        Field(
            description='(Optional) - describes the details of the detector (manufacturerName, modelName and detectorID) as part of manufacturerDetails'
        ),
    ] = None
    componentGeometry: Annotated[
        Optional[CoordinateSet],
        Field(
            description='(Optional) - xyz coordinates describing the position of the detector defined separately as coordinateSet'
        ),
    ] = None
    lastCalibration: Annotated[
        Optional[str],
        Field(
            description='(Optional) - date and time of last calibration (YYYY-MM-DDTHH:mm:ss.sssZ)',
            pattern='^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z?)$',
        ),
    ] = None
    detectorBias: Annotated[
        Optional[VoltageDetails],
        Field(
            description='(Optional) - bias voltage applied to the detector defined separately as voltageDetails. Allowed units nV, uV, mV, V, kV'
        ),
    ] = None


class Unit7(Enum):
    meV = 'meV'
    eV = 'eV'
    keV = 'keV'
    MeV = 'MeV'
    nJ = 'nJ'
    mJ = 'mJ'
    µJ = 'µJ'
    J = 'J'
    kJ = 'kJ'
    MJ = 'MJ'


class EnergyDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(
            description='(Required) - The energy expressed as an integer or floating point value.'
        ),
    ] = None
    unit: Annotated[
        Optional[Unit7],
        Field(
            description='(Required) - the unit of the value to be selected from a controlled list (meV, eV, keV, MeV, nJ, µJ, mJ, J, kJ, MJ).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).'
        ),
    ] = None
    uncertainty: Annotated[
        Optional[UncertaintyDetails],
        Field(
            description='(Optional) - Uncertainty in the value defined separately as uncertaintyDetails giving the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number'
        ),
    ] = None
    notes: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Further notes about the value of datatype string'
        ),
    ] = None


class BeamDepositionType(Enum):
    E_beam_Deposition = 'E-beam Deposition'
    I_beam_Deposition = 'I-beam Deposition'


class User(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    userName: Annotated[
        Optional[str],
        Field(
            description='(Required) - Full name of the user in the format (Family Name, Given Name)'
        ),
    ] = None
    givenName: Annotated[
        Optional[str], Field(description='(Optional) - Given name of the user')
    ] = None
    familyName: Annotated[
        Optional[str], Field(description='(Optional) - Family name of the user')
    ] = None
    role: Annotated[
        Optional[Role],
        Field(
            description='(Optional) - Role of the user to be selected from: *Data Curator *Instrument Scientist *Principal Investigator *Project Member *Research User *Site Leader *Work Package Leader'
        ),
    ] = None
    affiliation: Annotated[
        Optional[InstitutionDetails],
        Field(
            description='(Optional) - Details of the institution to which the user is affiliated'
        ),
    ] = None
    email: Annotated[
        Optional[EmailStr], Field(description='(Optional) - Email of the user')
    ] = None
    ORCID: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Open Researcher and Contributor ID expressed as a URI',
            pattern='^https://orcid\\.org/[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{3}[X0-9]{1}$',
        ),
    ] = None


class DistanceDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Annotated[
        Optional[float],
        Field(description='(Required) - Value of the distance, size or length'),
    ] = None
    unit: Annotated[
        Optional[Unit],
        Field(
            description='(Required) - Unit of the value to be selected from a controlled list (fm, pm, nm, µm, mm, cm, m).'
        ),
    ] = None
    qualifier: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Qualifier to describe the value (e.g., average, maximum, minimum).'
        ),
    ] = None
    uncertainty: Annotated[
        Optional[UncertaintyDetails],
        Field(
            description='(Optional) - Uncertainty of the value. Allows to specify whether the uncertainty is absolute or relative.'
        ),
    ] = None
    notes: Annotated[
        Optional[str], Field(description='(Optional) - Further notes about the value.')
    ] = None


class SourceDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sourceName: Annotated[
        Optional[str],
        Field(description='(Optional) - name of the e-beam source of datatype string'),
    ] = None
    sourceID: Annotated[
        Optional[Identifier],
        Field(description='(Optional) - identifier for the e-beam source'),
    ] = None
    accelerationVoltage: Annotated[
        Optional[VoltageDetails],
        Field(
            description='(Required) - the voltage with which the e-beam is accelerated, defined separately as voltageDetails, (includes the voltage value, optional uncertainty, optional qualifier like max or min, optional note of the type string, and a controlled list of units from which one can be chosen - µV, mv, V, kV, MV)'
        ),
    ] = None
    beamCurrent: Annotated[
        Optional[CurrentDetails],
        Field(
            description='(Optional) - the measured current of the e-beam, defined separately as currentDetails (includes the current value, optional uncertainty, optional qualifier like max or min, optional note of the type string, and a controlled list of units from which one can be chosen - pA, nA, uA, mA, A, kA)'
        ),
    ] = None
    highCurrent: Annotated[
        Optional[bool],
        Field(
            description='(Optional) - Is special control of the electron optics enabled to increase the specimen current? true or false'
        ),
    ] = None
    sourceLifetime: Annotated[
        Optional[LifetimeDetails],
        Field(
            description='(Optional) - lifetime of the source (typical value - uAh) of datatype string'
        ),
    ] = None
    gunVacuum: Annotated[
        Optional[PressureDetails],
        Field(
            description='(Optional) - Gives the pressure maintained in the electron gun'
        ),
    ] = None
    gunPressure: Annotated[
        Optional[PressureDetails],
        Field(description='(Optional) - Gives the pressure maintained in the FIB gun'),
    ] = None


class StageDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    stageAlignmentDone: Annotated[
        Optional[bool],
        Field(description='(Optional) - was stage alignment done? (check if true)'),
    ] = None
    isCorrelationImage: Annotated[
        Optional[bool],
        Field(
            description='(Optional) - Whether the image is used for correlating in xyz coordinates with another image? Check if true. If true the coordinates have to be entered for the sake of correlative characterization of datatype boolean'
        ),
    ] = None
    coordinates: Annotated[
        Optional[CoordinateSet],
        Field(
            description='(Optional) - the xyz coordinates of a point expressed separately as coordinateSet which allows entering each of the xyz coordinates along with their optional uncertainties. If correllation images (two reference spots) are available, the coordinates enable correlative microscopy and they need to be entered'
        ),
    ] = None
    coordinateReference: Annotated[
        Optional[str],
        Field(
            description='(Optional) - description of the reference used for defining the coordinates (for eg. - origin at centre of sample, distances from two edges, etc.)'
        ),
    ] = 'origin at centre of sample'
    stageTiltAngle: Annotated[
        Optional[AngleDetails],
        Field(
            description='(Required) - angle by which the stage is actually tilted (Stage at T) defined separately as angleDetails with the angle value, optional uncertainty, optional notes, optional qualifier and choice of units between degree and radian'
        ),
    ] = None
    preTilt: Annotated[
        Optional[AngleDetails],
        Field(
            description='(Optional) - predefined angle of a tilted sample holder which is tilted by design defined separately as angleDetails with the angle value, optional uncertainty, optional notes, optional qualifier and choice of units between degree and radian'
        ),
    ] = None
    tiltCorrectionAngle: Annotated[
        Optional[AngleDetails],
        Field(
            description='(Optional) - angle used to correct the tilt of the sample defined separately as angleDetails with the angle value, optional uncertainty, optional notes, optional qualifier and choice of units between degree and radian'
        ),
    ] = None
    tiltCorrectionType: Annotated[
        Optional[str],
        Field(
            description='(Optional) - the tilt correction type applied to the image to compensate for the tilting, for e.g., sample surface, cross-section, none or manual, default value - none.'
        ),
    ] = 'none'
    eBeamWorkingDistance: Annotated[
        Optional[DistanceDetails],
        Field(
            description='(Required) - the distance at which the beam is focussed (when the sample is in focus, this will be the distance between the bottom end of the pole-piece of the objective lens and the sample) defined separately as distanceDetails, with the distance value, optional uncertainty, optional notes, optional qualifier and choice of units between nm, um, mm, cm and m'
        ),
    ] = None


class ApertureSettingType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    size: Annotated[
        Optional[DistanceDetails],
        Field(
            description='(Optional) - the size of the aperture which can be directly controlled using the instrument settings defined separately as distanceDetails'
        ),
    ] = None
    current: Annotated[
        Optional[CurrentDetails],
        Field(
            description='(Optional) - the beam current setting which would indirectly control the size of the aperture defined separately as currentDetails'
        ),
    ] = None


class Pixelsize3D(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    xPixelSize: Annotated[
        Optional[PixelSizeDetails],
        Field(
            description='(Required) -  distance on the sample covered by a pixel in the x direction defined separately as pixelSizeDetails'
        ),
    ] = None
    yPixelSize: Annotated[
        Optional[PixelSizeDetails],
        Field(
            description='(Optional) - distance on the sample covered by a pixel in the y direction defined separately as pixelSizeDetails; The y-pixel-size is to be given only if it is different from the x-pixel-size'
        ),
    ] = None
    zPixelSize: Annotated[
        Optional[PixelSizeDetails],
        Field(
            description='(Optional) - distance on the sample covered by a pixel in the z direction defined separately as pixelSizeDetails; The z-pixel-size can be ignored if it is greater than the voxel size'
        ),
    ] = None


class DetectorSetDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    signalMixingDone: Annotated[
        Optional[bool],
        Field(
            description='(Optional) - whether the detector signals are mixed, true or false, of datatype boolean'
        ),
    ] = False
    signalMixingDescription: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Describes the purpose and technique of signal mixing of datatype string'
        ),
    ] = None
    detector1: Annotated[
        Optional[DetectorDetails],
        Field(
            description='(Required) - gives the settings of one detector defined separately as detectorDetails; entering the details of at least one detector is compulsory'
        ),
    ] = None
    detector2: Annotated[
        Optional[DetectorDetails],
        Field(
            description='(Optional) - gives the settings of a second detector defined separately as detectorDetails'
        ),
    ] = None


class EBeamDecelerationDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    landingEnergy: Annotated[
        Optional[EnergyDetails],
        Field(
            description='(Optional) - Landing energy of the e-beam defined separately as energyDetails (allowed units - meV, eV, keV, nJ, mJ, J, kJ, MJ)'
        ),
    ] = None
    stageBias: Annotated[
        Optional[VoltageDetails],
        Field(
            description='(Optional) - Bias voltage applied to the stage defined separately biasDetails (allowed units - nV, uV, mV, V, kV, nA, uA, mA, A, kA)'
        ),
    ] = None


class GISDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    GISName: Annotated[
        Optional[str],
        Field(description='(Optional) - Name of the GIS system of datatype string'),
    ] = None
    beamDepositionType: Annotated[
        Optional[BeamDepositionType],
        Field(
            description='(Optional) - type of beam deposition of datatype string to choose between e-beam deposition and i-beam deposition'
        ),
    ] = None
    depositionCurrent: Annotated[
        Optional[CurrentDetails],
        Field(
            description='(Optional) - the current used for performing beam deposition defined separately as currentDetails (Allowed units pA,nA,uA,mA,A)'
        ),
    ] = None
    depositionSize: Annotated[
        Optional[DistanceDetails],
        Field(
            description='(Optional) - the size of the deposition defined separately as distanceDetails (Allowed units nm,um,mm,cm,m)'
        ),
    ] = None
    depositionTime: Annotated[
        Optional[TimeDetails],
        Field(
            description='(Optional) - total time for deposition defined separately as timeDetails (Allowed units ps,ns,us,ms,s)'
        ),
    ] = None


class ImagingDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    numberOfPixels: Annotated[
        Optional[PixelNumberType],
        Field(
            description='(Required) - The number of x, y pixels of the image, defined separately as pixelNumberType with separate entries for integer values of xPixels and yPixels'
        ),
    ] = None
    pixelSize: Annotated[
        Optional[Pixelsize3D],
        Field(
            description='(Required) - Physical x,y,z length imaged by a single pixel, normally expressed in nm/pixel, defined separately as pixelSize3D for the mapping along x,y and z directions, with each pixel having a pixelSize, optional uncertainty, optional qualifier and optional notes. The y-pixel-size is to be given only if it is different from the x-pixel-size, and z-pixel-size can be ignored if it is greater than voxel size'
        ),
    ] = None
    collectionMethod: Annotated[
        Optional[str],
        Field(
            description='(Optional) - the method of collection of the image, for e.g., normal scan, average of multiple images, integration of multiple images, default value - normal scan.'
        ),
    ] = 'normal scan'
    dynamicFocus: Annotated[
        Optional[bool],
        Field(
            description='(Optional) - To be set to true if dynamic focus is turned on, else false'
        ),
    ] = None
    apertureSetting: Annotated[
        Optional[ApertureSettingType],
        Field(
            description='(Optional) - The setting for controlling the aperture size, using either the aperture size (directly) or the beam current (indirectly). The element apertureSetting is defined separately as apertureSettingType which gives the option to choose between current or size. If the size can be set directly, then it is defined with the complex type distanceDetails, else if the aperture setting is controlled with the beam current defined separately as currentDetails'
        ),
    ] = None
    dwellTime: Annotated[
        Optional[TimeDetails],
        Field(
            description='(Optional) - the dwell time of the beam per pixel, defined separately as  timeDetails'
        ),
    ] = None
    cycleTime: Annotated[
        Optional[TimeDetails],
        Field(
            description='(Optional) - the time taken by the beam to scan a frame,  defined separately as  timeDetails. It is the time needed to scan a line times the number of lines in a frame.'
        ),
    ] = None
    noiseReduction: Annotated[
        Optional[NoiseReduction],
        Field(
            description='(Optional) - The type of noise reduction used as an enumerated list of six parameters: Pixel Avg, Line Avg, Frame Avg,  Pixel Int, Line Int, Frame Int.'
        ),
    ] = None
    voxel: Annotated[
        Optional[VoxelDetails],
        Field(
            description='(Optional) - Size of the voxel in case 3D imaging is done for Energy-dispersive X-ray Spectroscopy or Electron-backscatter Diffraction, defined separately as voxelDetails'
        ),
    ] = None


class FIBDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    FIBColumn: Annotated[
        Optional[str],
        Field(description='(Optional) - The name of the I-beam column used'),
    ] = None
    angleToEBeam: Annotated[
        Optional[AngleDetails],
        Field(
            description='(Optional) - angle between e-beam and i-beam defined separately as angleDetails (Allowed units: degree, radian)'
        ),
    ] = None
    iBeamSource: Annotated[
        Optional[SourceDetails],
        Field(
            description='(Required) - describes the details of the FIB source, defined separately as sourceDetails in which it is important to note the accelerating voltage and beam current of the i-beam'
        ),
    ] = None
    FIBExtractor: Annotated[
        Optional[VoltageDetails],
        Field(description='(Required) - The extractor voltage used for the I-Beam'),
    ] = None
    FIBProbe: Annotated[
        Optional[str],
        Field(
            description='(Required) - The settings used for the probe, extractor voltage:milling current. eg. 30kV:50pA'
        ),
    ] = None
    gasInjectionSystem: Annotated[
        Optional[GISDetails],
        Field(
            description='(Optional) - Details about the gas injection system (GIS) defined separately as GISDetails'
        ),
    ] = None
    iBeamWorkingDistance: Annotated[
        Optional[DistanceDetails],
        Field(
            description='(Optional) - Working distance of the ion beam (i-beam) defined separately as distanceDetails - this value needs to be entered if the i-beam focus has to be set independently from the e-beam focus (Allowed units: nm, um, mm, cm, m)'
        ),
    ] = None
    FIBSpotSize: Annotated[
        Optional[DistanceDetails],
        Field(
            description='(Optional) - spot size of the i-beam at the focus when the sample is in focus (also the spot size on the sample) defined separately as distanceDetails (Allowed units: nm, um, mm, cm, m)'
        ),
    ] = None


class InstrumentDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    instrumentName: Annotated[
        Optional[str], Field(description='(Required) - Name of the instrument')
    ] = None
    instrumentID: Annotated[
        Optional[Identifier],
        Field(description='(Optional) - Identifier of the instrument'),
    ] = None
    instrumentManufacturer: Annotated[
        Optional[ManufacturerDetails],
        Field(
            description='(Optional) - Details about the manufacturer or vendor of the instrument'
        ),
    ] = None
    chamberPressure: Annotated[
        Optional[PressureDetails],
        Field(
            description='(Required) - Pressure maintained inside the chamber (in which the sample is housed) during the measurement'
        ),
    ] = None
    eBeamSource: Annotated[
        Optional[SourceDetails],
        Field(description='(Required) - Details about the electron-beam source'),
    ] = None
    stage: Annotated[
        Optional[StageDetails],
        Field(description='(Required) - Details about the stage'),
    ] = None
    imaging: Annotated[
        Optional[ImagingDetails],
        Field(
            description='(Required) - Details about the imaging settings of the instrument'
        ),
    ] = None
    detectors: Annotated[
        Optional[DetectorSetDetails],
        Field(
            description='(Required) - This group contains for SEM at least one detector, with the option to include a second one in case of signal mixing'
        ),
    ] = None
    eBeamDeceleration: Annotated[
        Optional[EBeamDecelerationDetails],
        Field(
            description='(Optional) - Details about the instrument settings for electron-beam deceleration'
        ),
    ] = None
    FIB: Annotated[
        Optional[FIBDetails],
        Field(
            description='(Optional) - Details about an additional Focused Oon Beam (FIB) extension to the instrument'
        ),
    ] = None


class Entry(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    technique: Annotated[
        Optional[str],
        Field(
            description='(Required) - Any experimental, theoretical or computational method used during Data Acquisition or during any of the processes included in the Data Analysis Lifecycle to acquire, process or analyse Research Data about a System or a set of them with an Instrument, which is used to generate this metadata.'
        ),
    ] = None
    measurementPurpose: Annotated[
        Optional[MeasurementPurpose],
        Field(
            description='(Required) - Measurement is experimental Data Acquisition, typically performed on a Sample using an experimental Technique. It may also be performed during Fabrication or Sample Preparation, e.g., to characterise the intermediate stages and/or the final resulting Precursor(s) or Sample(s), respectively. A Measurement may require the use of Consumables.'
        ),
    ] = None
    measurementDescription: Annotated[
        Optional[str],
        Field(description='(Optional) - Description about the measurement.'),
    ] = None
    equipment: Annotated[
        Optional[str],
        Field(
            description='(Optional) - Any kind of physical or virtual item, device, machine or other tools used to perform one or more Fabrication(s), Sample Preparation(s), Model Preparation(s), Data Acquisition(s) and/or any of the processes included in the Data Analysis Lifecycle. Usually, the Equipment is located in a Laboratory hosted by an Institution and/or can be virtually or remotely accessed. Equipment is usually an investment. According to this definition, an Instrument is a particular type of Equipment.'
        ),
    ] = None
    consumables: Annotated[
        Optional[List[str]],
        Field(
            description='(Optional) - Auxiliary entity used during Fabrication, Sample Preparation or Measurement which has a limited time capacity or is limited in its number of uses before it is disposed of, necessary to the process itself and normally bought from third party manufacturers. Examples are: gloves, syringes, wipes, etching solutions, glass slides, spatulas, weighing paper, two-sided tape.',
            min_length=1,
        ),
    ] = None
    parents: Annotated[
        Optional[List[Parent]],
        Field(
            description='(Required) - Parents of this metadata like the metadata document of the sample with which the measurement was performed.',
            min_length=1,
        ),
    ] = None
    entryID: Annotated[
        Optional[Identifier],
        Field(
            description='entryID (Optional)- Identifier of the measurement usually provided by the project or the laboratory'
        ),
    ] = None
    title: Annotated[
        Optional[str],
        Field(description='(Required)- Extended title of the measurement'),
    ] = None
    startTime: Annotated[
        Optional[str],
        Field(
            description='(Optional)- Start time of the measurement in the format YYYY-MM-DDTHH:mm:ss.sssZ',
            pattern='^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z?)$',
        ),
    ] = None
    endTime: Annotated[
        Optional[str],
        Field(
            description='(Required)- End time of the measurement in the format YYYY-MM-DDTHH:mm:ss.sssZ',
            pattern='^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z?)$',
        ),
    ] = None
    program: Annotated[
        Optional[Program],
        Field(
            description='(Optional)- Details concerning the program (or software) used for aquisition'
        ),
    ] = None
    revision: Annotated[
        Optional[Revision],
        Field(
            description='(Optional)- Details concerning any revision to the document due to e.g. re-calibration, reprocessing, new analysis, new instrument definition format'
        ),
    ] = None
    user: Annotated[
        Optional[User],
        Field(
            description='(Required)- The contact information of the user responsible for the measurement'
        ),
    ] = None
    instrument: Annotated[
        Optional[InstrumentDetails],
        Field(description='(Required)- Details concerning the instrument settings'),
    ] = None


class Sem(BaseModel):
    entry: Optional[Entry] = None
