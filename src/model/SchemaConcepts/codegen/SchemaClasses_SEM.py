# generated by datamodel-codegen:
#   filename:  SEM_schema.json
#   timestamp: 2025-02-23T17:44:58+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, EmailStr, Field, constr


class MeasurementPurpose(Enum):
    assessment__to_given_categories_or_values_ = (
        'assessment (to given categories or values)'
    )
    completeness_check__presence_or_absence_of_given_properties_ = (
        'completeness check (presence or absence of given properties)'
    )
    correlative_characterization__dedicated_sample_treatment_to_emphasise_given_features_ = 'correlative characterization (dedicated sample treatment to emphasise given features)'
    exploratory__routine_check_of_known_properties_ = (
        'exploratory (routine check of known properties)'
    )
    feasibility__quick_check__rough_estimate_ = (
        'feasibility (quick check, rough estimate)'
    )
    high_quality_measurement__precise__careful_treatment_ = (
        'high quality measurement (precise, careful treatment)'
    )
    test_specific_hypothesis__focus_only_on_given_aspects_ = (
        'test specific hypothesis (focus only on given aspects)'
    )
    other__please_specify_in_the_comment_ = 'other (please specify in the comment)'


class ParentType(Enum):
    not_applicable = 'not applicable'
    sample = 'sample'


class ParentReferenceType(Enum):
    plain_text = 'plain text'
    external_URL = 'external URL'
    MetaStore_URI = 'MetaStore URI'


class Parent(BaseModel):
    parentType: Optional[ParentType] = 'sample'
    parentReferenceType: Optional[ParentReferenceType] = 'MetaStore URI'
    parentReference: Optional[str] = Field(
        None,
        description="If type is 'MetaStore URI' it is possible to easily fill this field in a later stage",
    )


class IdentifierType(Enum):
    ROR = 'ROR'
    GRID = 'GRID'
    ISNI = 'ISNI'
    URL = 'URL'
    DOI = 'DOI'
    Handle = 'Handle'


class Identifier(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    identifierValue: Optional[str] = Field(
        None, description='(Optional) - String containing the value of an identifier'
    )
    identifierType: Optional[IdentifierType] = Field(
        None,
        description='(Optional) - Type of the identifier to be selected from: *ROR *GRID *ISNI *URL *DOI *Handle',
    )


class Program(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    programName: Optional[str] = Field(
        None,
        description='(Optional) - Name of the program (or software) used for acquisition',
    )
    programVersion: Optional[str] = Field(
        None, description='(Optional) - Program (or software) version number'
    )


class Revision(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    revisonID: Optional[Identifier] = Field(
        None, description='(Optional) - Identifier of the file'
    )
    revisionComment: Optional[str] = Field(
        None, description='(Optional)- Any comments to the revision'
    )


class Role(Enum):
    Data_Curator = 'Data Curator'
    Instrument_Scientist = 'Instrument Scientist'
    Team_Leader = 'Team Leader'
    Team_Member = 'Team Member'


class InstitutionDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    institutionName: Optional[str] = Field(
        None, description='(Optional) - Full name of the institution'
    )
    institutionAcronym: Optional[str] = Field(
        None, description='(Recommended) - Acronym of the institution'
    )
    institutionDepartment: Optional[str] = Field(
        None, description='(Optional) - Department within an institution'
    )
    institutionID: Optional[Identifier] = Field(
        None,
        description='(Optional) - Identifier pertaining to the institution (e.g. ROR)',
    )


class Unit(Enum):
    fm = 'fm'
    pm = 'pm'
    nm = 'nm'
    µm = 'µm'
    mm = 'mm'
    cm = 'cm'
    m = 'm'


class UncertaintyType(Enum):
    absolute = 'absolute'
    relative = 'relative'


class UncertaintyDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    uncertaintyType: Optional[UncertaintyType] = Field(
        None,
        description='(Required) - Type of the uncertainty to be chosen between absolute or relative.',
    )
    value: Optional[float] = Field(
        None, description='(Required) - Value of the uncertainty.'
    )


class Unit1(Enum):
    ng = 'ng'
    µg = 'µg'
    mg = 'mg'
    g = 'g'
    kg = 'kg'


class WeightDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[float] = Field(
        None, description='(Required) - Value of the weight.'
    )
    unit: Optional[Unit1] = Field(
        None,
        description='(Required) - Unit of the value to be selected from a controlled list (ng, µg, mg, g, kg).',
    )
    qualifier: Optional[str] = Field(
        None,
        description='(Optional) - Qualifier to describe the value (e.g., average, maximum, minimum).',
    )
    uncertainty: Optional[UncertaintyDetails] = Field(
        None,
        description='(Optional) - Uncertainty of the value. Allows to specify whether the uncertainty is absolute or relative.',
    )
    notes: Optional[str] = Field(
        None, description='(Optional) - Further notes about the value.'
    )


class SamplePrepType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    preparationDate: Optional[date] = Field(
        None, description='(Optional) - Date of the sample preparation'
    )
    preparationDescription: Optional[str] = Field(
        None, description='(Optional) - Short description of the sample preparation'
    )
    preparationID: Optional[Identifier] = Field(
        None, description='(Optional) - Identifier of the sample preparation'
    )


class ManufacturerDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    manufacturerName: Optional[str] = Field(
        None, description='(Optional) - Name of the manufacturer'
    )
    modelName: Optional[str] = Field(
        None, description='(Optional) - Model of the instrument'
    )
    manufacturerID: Optional[Identifier] = Field(
        None, description='(Optional) - Identifier of the manufacturer'
    )


class Unit2(Enum):
    Pa = 'Pa'
    hPa = 'hPa'
    kPa = 'kPa'
    MPa = 'MPa'
    GPa = 'GPa'
    mbar = 'mbar'
    bar = 'bar'
    psi = 'psi'


class PressureDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[float] = Field(
        None, description='(Required) - Value of the pressure.'
    )
    unit: Optional[Unit2] = Field(
        None,
        description='(Required) - Unit of the value to be selected from a controlled list (Pa, hPa, kPa, MPa, GPa, mbar, bar, psi).',
    )
    qualifier: Optional[str] = Field(
        None,
        description='(Optional) - Qualifier to describe the value (e.g., average, maximum, minimum).',
    )
    uncertainty: Optional[UncertaintyDetails] = Field(
        None,
        description='(Optional) - Uncertainty of the value. Allows to specify whether the uncertainty is absolute or relative.',
    )
    notes: Optional[str] = Field(
        None, description='(Optional) - Further notes about the value.'
    )


class LifetimeDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[float] = Field(
        None,
        description='(Required) - The lifetime of the source expressed as an integer or floating point value of datatype number.',
    )
    unit: Optional[str] = Field(
        None, description='(Required) - the unit of the value (typical unit - µAh).'
    )
    qualifier: Optional[str] = Field(
        None,
        description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).',
    )
    uncertainty: Optional[UncertaintyDetails] = Field(
        None,
        description='(Optional) - Uncertainty in the value defined separately as  uncertaintyDetails, which gives the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number.',
    )
    notes: Optional[str] = Field(
        None, description='(Optional) - Further notes about the value.'
    )


class Unit3(Enum):
    µV = 'µV'
    mV = 'mV'
    V = 'V'
    kV = 'kV'
    MV = 'MV'


class VoltageDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[float] = Field(
        None,
        description='(Required) - The voltage expressed as an integer or floating point value of datatype number.',
    )
    unit: Optional[Unit3] = Field(
        None,
        description='(Required) - the unit of the value to be selected from a controlled list (µV, mV, V, kV, MV, GV).',
    )
    qualifier: Optional[str] = Field(
        None,
        description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).',
    )
    uncertainty: Optional[UncertaintyDetails] = Field(
        None,
        description='(Optional) - Uncertainty in the value defined separately as  uncertaintyDetails, which gives the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number.',
    )
    notes: Optional[str] = Field(
        None,
        description='(Optional) - Further notes about the value of datatype string',
    )


class Unit4(Enum):
    pA = 'pA'
    nA = 'nA'
    µA = 'µA'
    mA = 'mA'
    A = 'A'


class CurrentDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[float] = Field(
        None, description='(Optional) - Further notes about the value.'
    )
    unit: Optional[Unit4] = Field(
        None,
        description='(Required) - the unit of the value to be selected from a controlled list (pA, nA, uA, mA, A).',
    )
    qualifier: Optional[str] = Field(
        None,
        description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).',
    )
    uncertainty: Optional[UncertaintyDetails] = Field(
        None,
        description='(Optional) - Uncertainty in the value defined separately as  uncertaintyDetails, which gives the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number.',
    )
    notes: Optional[str] = Field(
        None, description='(Optional) - Further notes about the value.'
    )


class Unit5(Enum):
    degree = 'degree'
    radian = 'radian'


class AngleDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[float] = Field(
        None,
        description='(Required) - The angle expressed as an integer or floating point value.',
    )
    unit: Optional[Unit5] = Field(
        None,
        description='(Required) - the unit of the value to be selected from a controlled list (degree, radian).',
    )
    qualifier: Optional[str] = Field(
        None,
        description='(Optional) - A qualifier to describe the value (e.g., avg, max, mi).',
    )
    uncertainty: Optional[UncertaintyDetails] = Field(
        None,
        description='(Optional) - Uncertainty in the value defined separately as uncertaintyDetails, which gives the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number.',
    )
    notes: Optional[str] = Field(
        None, description='(Optional) - Further notes about the value.'
    )


class NoiseReduction(Enum):
    Pixel_Avg = 'Pixel Avg'
    Line_Avg = 'Line Avg'
    Frame_Avg = 'Frame Avg'
    Pixel_Int = 'Pixel Int'
    Line_Int = 'Line Int'
    Frame_Int = 'Frame Int'


class CoordinatesUnit(Enum):
    nm = 'nm'
    µm = 'µm'
    mm = 'mm'
    cm = 'cm'
    m = 'm'


class CoordinateSet(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    xValue: Optional[float] = Field(
        None, description='(Optional) - value of the x coordinate.'
    )
    xUncertainty: Optional[UncertaintyDetails] = Field(
        None, description='(Optional) - uncertainty in the x value.'
    )
    yValue: Optional[float] = Field(
        None, description='(Optional) - value of the y coordinate.'
    )
    yUncertainty: Optional[UncertaintyDetails] = Field(
        None, description='(Optional) -uncertainty in the y value.'
    )
    zValue: Optional[float] = Field(
        None, description='(Optional) - value of the z coordinate.'
    )
    zUncertainty: Optional[UncertaintyDetails] = Field(
        None, description='(Optional) -uncertainty in the z value.'
    )
    coordinatesUnit: Optional[CoordinatesUnit] = Field(
        None,
        description='(Optional) - unit of the coordinates (allowed units - nm, µm, mm, cm, m)',
    )


class PixelNumberType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    xPixels: Optional[float] = Field(
        None,
        description='(Required) - no. of pixels in horizontal direction of datatype number',
    )
    yPixels: Optional[float] = Field(
        None,
        description='(Required) - no. of pixels in vertical direction of datatype number',
    )


class PixelSizeDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[float] = Field(
        None,
        description='(Required) - The pixel-size expressed as an integer or floating point value.',
    )
    unit: Optional[str] = Field(
        None,
        description='(Required) - the unit of the value (typical unit - nm/pixel).',
    )
    qualifier: Optional[str] = Field(
        None,
        description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).',
    )
    uncertainty: Optional[UncertaintyDetails] = Field(
        None,
        description='(Optional) - Uncertainty in the value defined as a complex type uncertaintyDetails, which gives the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number.',
    )
    notes: Optional[str] = Field(
        None, description='(Optional) - Further notes about the value.'
    )


class Unit6(Enum):
    ps = 'ps'
    ns = 'ns'
    µs = 'µs'
    ms = 'ms'
    s = 's'
    min = 'min'
    hr = 'hr'


class TimeDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[float] = Field(
        None,
        description='(Required) - The time expressed as an integer or floating point value of datatype number.',
    )
    unit: Optional[Unit6] = Field(
        None,
        description='(Required) - the unit of the value to be selected from a controlled list (ps, ns, µs, ms, s).',
    )
    qualifier: Optional[str] = Field(
        None,
        description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).',
    )
    uncertainty: Optional[UncertaintyDetails] = Field(
        None,
        description='(Optional) - Uncertainty in the value defined as a complex type uncertaintyDetails, which gives the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number.',
    )
    notes: Optional[str] = Field(
        None, description='(Optional) - Further notes about the value.'
    )


class VoxelDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[float] = Field(
        None,
        description='(Required) - The voxel-size expressed as an integer or floating point value.',
    )
    unit: Optional[str] = Field(None, description='(Required) - the unit of the value.')
    qualifier: Optional[str] = Field(
        None,
        description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).',
    )
    uncertainty: Optional[UncertaintyDetails] = Field(
        None,
        description='(Optional) - Uncertainty in the value defined as a complex type uncertaintyDetails, which gives the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number.',
    )
    notes: Optional[str] = Field(
        None, description='(Optional) - Further notes about the value.'
    )


class DetectorDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    detectorType: Optional[str] = Field(
        'Secondary Electron',
        description='(Optional) - The type of detector (e.g., surface electron detection,  secondary electron, back-scattered electron) of datatype string',
    )
    detectorName: Optional[str] = Field(
        None, description='(Required) -Name of the detector of datatype string'
    )
    detectorID: Optional[Identifier] = Field(
        None, description='(Optional) - Identifier for the detector'
    )
    detectorManufacturer: Optional[ManufacturerDetails] = Field(
        None,
        description='(Optional) - describes the details of the detector (manufacturerName, modelName and detectorID) as part of manufacturerDetails',
    )
    componentGeometry: Optional[CoordinateSet] = Field(
        None,
        description='(Optional) - xyz coordinates describing the position of the detector defined separately as coordinateSet',
    )
    lastCalibration: Optional[
        constr(pattern=r'^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z?)$')
    ] = Field(
        None,
        description='(Optional) - date and time of last calibration (YYYY-MM-DDTHH:mm:ss.sssZ)',
    )
    detectorBias: Optional[VoltageDetails] = Field(
        None,
        description='(Optional) - bias voltage applied to the detector defined separately as voltageDetails. Allowed units nV, uV, mV, V, kV',
    )


class Unit7(Enum):
    meV = 'meV'
    eV = 'eV'
    keV = 'keV'
    MeV = 'MeV'
    nJ = 'nJ'
    mJ = 'mJ'
    µJ = 'µJ'
    J = 'J'
    kJ = 'kJ'
    MJ = 'MJ'


class EnergyDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[float] = Field(
        None,
        description='(Required) - The energy expressed as an integer or floating point value.',
    )
    unit: Optional[Unit7] = Field(
        None,
        description='(Required) - the unit of the value to be selected from a controlled list (meV, eV, keV, MeV, nJ, µJ, mJ, J, kJ, MJ).',
    )
    qualifier: Optional[str] = Field(
        None,
        description='(Optional) - A qualifier to describe the value (e.g., avg, max, min).',
    )
    uncertainty: Optional[UncertaintyDetails] = Field(
        None,
        description='(Optional) - Uncertainty in the value defined separately as uncertaintyDetails giving the option of choosing between an absolute uncertainty or relative uncertainty and entering the value of uncertainty as a number',
    )
    notes: Optional[str] = Field(
        None,
        description='(Optional) - Further notes about the value of datatype string',
    )


class BeamDepositionType(Enum):
    E_beam_Deposition = 'E-beam Deposition'
    I_beam_Deposition = 'I-beam Deposition'


class User(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    userName: Optional[str] = Field(
        None,
        description='(Required) - Full name of the user in the format (Family Name, Given Name)',
    )
    givenName: Optional[str] = Field(
        None, description='(Optional) - Given name of the user'
    )
    familyName: Optional[str] = Field(
        None, description='(Optional) - Family name of the user'
    )
    role: Optional[Role] = Field(
        None,
        description='(Optional) - Role of the user to be selected from: *Data Curator *Instrument Scientist *Principal Investigator *Project Member *Research User *Site Leader *Work Package Leader',
    )
    affiliation: Optional[InstitutionDetails] = Field(
        None,
        description='(Optional) - Details of the institution to which the user is affiliated',
    )
    email: Optional[EmailStr] = Field(
        None, description='(Optional) - Email of the user'
    )
    ORCID: Optional[
        constr(
            pattern=r'^https://orcid\.org/[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{3}[X0-9]{1}$'
        )
    ] = Field(
        None,
        description='(Optional) - Open Researcher and Contributor ID expressed as a URI',
    )


class DistanceDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[float] = Field(
        None, description='(Required) - Value of the distance, size or length'
    )
    unit: Optional[Unit] = Field(
        None,
        description='(Required) - Unit of the value to be selected from a controlled list (fm, pm, nm, µm, mm, cm, m).',
    )
    qualifier: Optional[str] = Field(
        None,
        description='(Optional) - Qualifier to describe the value (e.g., average, maximum, minimum).',
    )
    uncertainty: Optional[UncertaintyDetails] = Field(
        None,
        description='(Optional) - Uncertainty of the value. Allows to specify whether the uncertainty is absolute or relative.',
    )
    notes: Optional[str] = Field(
        None, description='(Optional) - Further notes about the value.'
    )


class SourceDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sourceName: Optional[str] = Field(
        None, description='(Optional) - name of the e-beam source of datatype string'
    )
    sourceID: Optional[Identifier] = Field(
        None, description='(Optional) - identifier for the e-beam source'
    )
    accelerationVoltage: Optional[VoltageDetails] = Field(
        None,
        description='(Required) - the voltage with which the e-beam is accelerated, defined separately as voltageDetails, (includes the voltage value, optional uncertainty, optional qualifier like max or min, optional note of the type string, and a controlled list of units from which one can be chosen - µV, mv, V, kV, MV)',
    )
    beamCurrent: Optional[CurrentDetails] = Field(
        None,
        description='(Optional) - the measured current of the e-beam, defined separately as currentDetails (includes the current value, optional uncertainty, optional qualifier like max or min, optional note of the type string, and a controlled list of units from which one can be chosen - pA, nA, uA, mA, A, kA)',
    )
    highCurrent: Optional[bool] = Field(
        None,
        description='(Optional) - Is special control of the electron optics enabled to increase the specimen current? true or false',
    )
    sourceLifetime: Optional[LifetimeDetails] = Field(
        None,
        description='(Optional) - lifetime of the source (typical value - uAh) of datatype string',
    )
    gunVacuum: Optional[PressureDetails] = Field(
        None,
        description='(Optional) - Gives the pressure maintained in the electron gun',
    )
    gunPressure: Optional[PressureDetails] = Field(
        None, description='(Optional) - Gives the pressure maintained in the FIB gun'
    )


class StageDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    stageAlignmentDone: Optional[bool] = Field(
        None, description='(Optional) - was stage alignment done? (check if true)'
    )
    isCorrelationImage: Optional[bool] = Field(
        None,
        description='(Optional) - Whether the image is used for correlating in xyz coordinates with another image? Check if true. If true the coordinates have to be entered for the sake of correlative characterization of datatype boolean',
    )
    coordinates: Optional[CoordinateSet] = Field(
        None,
        description='(Optional) - the xyz coordinates of a point expressed separately as coordinateSet which allows entering each of the xyz coordinates along with their optional uncertainties. If correllation images (two reference spots) are available, the coordinates enable correlative microscopy and they need to be entered',
    )
    coordinateReference: Optional[str] = Field(
        'origin at centre of sample',
        description='(Optional) - description of the reference used for defining the coordinates (for eg. - origin at centre of sample, distances from two edges, etc.)',
    )
    stageTiltAngle: Optional[AngleDetails] = Field(
        None,
        description='(Required) - angle by which the stage is actually tilted (Stage at T) defined separately as angleDetails with the angle value, optional uncertainty, optional notes, optional qualifier and choice of units between degree and radian',
    )
    preTilt: Optional[AngleDetails] = Field(
        None,
        description='(Optional) - predefined angle of a tilted sample holder which is tilted by design defined separately as angleDetails with the angle value, optional uncertainty, optional notes, optional qualifier and choice of units between degree and radian',
    )
    tiltCorrectionAngle: Optional[AngleDetails] = Field(
        None,
        description='(Optional) - angle used to correct the tilt of the sample defined separately as angleDetails with the angle value, optional uncertainty, optional notes, optional qualifier and choice of units between degree and radian',
    )
    tiltCorrectionType: Optional[str] = Field(
        'none',
        description='(Optional) - the tilt correction type applied to the image to compensate for the tilting, for e.g., sample surface, cross-section, none or manual, default value - none.',
    )
    eBeamWorkingDistance: Optional[DistanceDetails] = Field(
        None,
        description='(Required) - the distance at which the beam is focussed (when the sample is in focus, this will be the distance between the bottom end of the pole-piece of the objective lens and the sample) defined separately as distanceDetails, with the distance value, optional uncertainty, optional notes, optional qualifier and choice of units between nm, um, mm, cm and m',
    )


class ApertureSettingType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    size: Optional[DistanceDetails] = Field(
        None,
        description='(Optional) - the size of the aperture which can be directly controlled using the instrument settings defined separately as distanceDetails',
    )
    current: Optional[CurrentDetails] = Field(
        None,
        description='(Optional) - the beam current setting which would indirectly control the size of the aperture defined separately as currentDetails',
    )


class Pixelsize3D(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    xPixelSize: Optional[PixelSizeDetails] = Field(
        None,
        description='(Required) -  distance on the sample covered by a pixel in the x direction defined separately as pixelSizeDetails',
    )
    yPixelSize: Optional[PixelSizeDetails] = Field(
        None,
        description='(Optional) - distance on the sample covered by a pixel in the y direction defined separately as pixelSizeDetails; The y-pixel-size is to be given only if it is different from the x-pixel-size',
    )
    zPixelSize: Optional[PixelSizeDetails] = Field(
        None,
        description='(Optional) - distance on the sample covered by a pixel in the z direction defined separately as pixelSizeDetails; The z-pixel-size can be ignored if it is greater than the voxel size',
    )


class DetectorSetDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    signalMixingDone: Optional[bool] = Field(
        False,
        description='(Optional) - whether the detector signals are mixed, true or false, of datatype boolean',
    )
    signalMixingDescription: Optional[str] = Field(
        None,
        description='(Optional) - Describes the purpose and technique of signal mixing of datatype string',
    )
    detector1: Optional[DetectorDetails] = Field(
        None,
        description='(Required) - gives the settings of one detector defined separately as detectorDetails; entering the details of at least one detector is compulsory',
    )
    detector2: Optional[DetectorDetails] = Field(
        None,
        description='(Optional) - gives the settings of a second detector defined separately as detectorDetails',
    )


class EBeamDecelerationDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    landingEnergy: Optional[EnergyDetails] = Field(
        None,
        description='(Optional) - Landing energy of the e-beam defined separately as energyDetails (allowed units - meV, eV, keV, nJ, mJ, J, kJ, MJ)',
    )
    stageBias: Optional[VoltageDetails] = Field(
        None,
        description='(Optional) - Bias voltage applied to the stage defined separately biasDetails (allowed units - nV, uV, mV, V, kV, nA, uA, mA, A, kA)',
    )


class GISDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    GISName: Optional[str] = Field(
        None, description='(Optional) - Name of the GIS system of datatype string'
    )
    beamDepositionType: Optional[BeamDepositionType] = Field(
        None,
        description='(Optional) - type of beam deposition of datatype string to choose between e-beam deposition and i-beam deposition',
    )
    depositionCurrent: Optional[CurrentDetails] = Field(
        None,
        description='(Optional) - the current used for performing beam deposition defined separately as currentDetails (Allowed units pA,nA,uA,mA,A)',
    )
    depositionSize: Optional[DistanceDetails] = Field(
        None,
        description='(Optional) - the size of the deposition defined separately as distanceDetails (Allowed units nm,um,mm,cm,m)',
    )
    depositionTime: Optional[TimeDetails] = Field(
        None,
        description='(Optional) - total time for deposition defined separately as timeDetails (Allowed units ps,ns,us,ms,s)',
    )


class ImagingDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    numberOfPixels: Optional[PixelNumberType] = Field(
        None,
        description='(Required) - The number of x, y pixels of the image, defined separately as pixelNumberType with separate entries for integer values of xPixels and yPixels',
    )
    pixelSize: Optional[Pixelsize3D] = Field(
        None,
        description='(Required) - Physical x,y,z length imaged by a single pixel, normally expressed in nm/pixel, defined separately as pixelSize3D for the mapping along x,y and z directions, with each pixel having a pixelSize, optional uncertainty, optional qualifier and optional notes. The y-pixel-size is to be given only if it is different from the x-pixel-size, and z-pixel-size can be ignored if it is greater than voxel size',
    )
    collectionMethod: Optional[str] = Field(
        'normal scan',
        description='(Optional) - the method of collection of the image, for e.g., normal scan, average of multiple images, integration of multiple images, default value - normal scan.',
    )
    dynamicFocus: Optional[bool] = Field(
        None,
        description='(Optional) - To be set to true if dynamic focus is turned on, else false',
    )
    apertureSetting: Optional[ApertureSettingType] = Field(
        None,
        description='(Optional) - The setting for controlling the aperture size, using either the aperture size (directly) or the beam current (indirectly). The element apertureSetting is defined separately as apertureSettingType which gives the option to choose between current or size. If the size can be set directly, then it is defined with the complex type distanceDetails, else if the aperture setting is controlled with the beam current defined separately as currentDetails',
    )
    dwellTime: Optional[TimeDetails] = Field(
        None,
        description='(Optional) - the dwell time of the beam per pixel, defined separately as  timeDetails',
    )
    cycleTime: Optional[TimeDetails] = Field(
        None,
        description='(Optional) - the time taken by the beam to scan a frame,  defined separately as  timeDetails. It is the time needed to scan a line times the number of lines in a frame.',
    )
    noiseReduction: Optional[NoiseReduction] = Field(
        None,
        description='(Optional) - The type of noise reduction used as an enumerated list of six parameters: Pixel Avg, Line Avg, Frame Avg,  Pixel Int, Line Int, Frame Int.',
    )
    voxel: Optional[VoxelDetails] = Field(
        None,
        description='(Optional) - Size of the voxel in case 3D imaging is done for Energy-dispersive X-ray Spectroscopy or Electron-backscatter Diffraction, defined separately as voxelDetails',
    )


class FIBDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    FIBColumn: Optional[str] = Field(
        None, description='(Optional) - The name of the I-beam column used'
    )
    angleToEBeam: Optional[AngleDetails] = Field(
        None,
        description='(Optional) - angle between e-beam and i-beam defined separately as angleDetails (Allowed units: degree, radian)',
    )
    iBeamSource: Optional[SourceDetails] = Field(
        None,
        description='(Required) - describes the details of the FIB source, defined separately as sourceDetails in which it is important to note the accelerating voltage and beam current of the i-beam',
    )
    FIBExtractor: Optional[VoltageDetails] = Field(
        None, description='(Required) - The extractor voltage used for the I-Beam'
    )
    FIBProbe: Optional[str] = Field(
        None,
        description='(Required) - The settings used for the probe, extractor voltage:milling current. eg. 30kV:50pA',
    )
    gasInjectionSystem: Optional[GISDetails] = Field(
        None,
        description='(Optional) - Details about the gas injection system (GIS) defined separately as GISDetails',
    )
    iBeamWorkingDistance: Optional[DistanceDetails] = Field(
        None,
        description='(Optional) - Working distance of the ion beam (i-beam) defined separately as distanceDetails - this value needs to be entered if the i-beam focus has to be set independently from the e-beam focus (Allowed units: nm, um, mm, cm, m)',
    )
    FIBSpotSize: Optional[DistanceDetails] = Field(
        None,
        description='(Optional) - spot size of the i-beam at the focus when the sample is in focus (also the spot size on the sample) defined separately as distanceDetails (Allowed units: nm, um, mm, cm, m)',
    )


class InstrumentDetails(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    instrumentName: Optional[str] = Field(
        None, description='(Required) - Name of the instrument'
    )
    instrumentID: Optional[Identifier] = Field(
        None, description='(Optional) - Identifier of the instrument'
    )
    instrumentManufacturer: Optional[ManufacturerDetails] = Field(
        None,
        description='(Optional) - Details about the manufacturer or vendor of the instrument',
    )
    chamberPressure: Optional[PressureDetails] = Field(
        None,
        description='(Required) - Pressure maintained inside the chamber (in which the sample is housed) during the measurement',
    )
    eBeamSource: Optional[SourceDetails] = Field(
        None, description='(Required) - Details about the electron-beam source'
    )
    stage: Optional[StageDetails] = Field(
        None, description='(Required) - Details about the stage'
    )
    imaging: Optional[ImagingDetails] = Field(
        None,
        description='(Required) - Details about the imaging settings of the instrument',
    )
    detectors: Optional[DetectorSetDetails] = Field(
        None,
        description='(Required) - This group contains for SEM at least one detector, with the option to include a second one in case of signal mixing',
    )
    eBeamDeceleration: Optional[EBeamDecelerationDetails] = Field(
        None,
        description='(Optional) - Details about the instrument settings for electron-beam deceleration',
    )
    FIB: Optional[FIBDetails] = Field(
        None,
        description='(Optional) - Details about an additional Focused Oon Beam (FIB) extension to the instrument',
    )


class Entry(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    technique: Optional[str] = Field(
        None,
        description='(Required) - Any experimental, theoretical or computational method used during Data Acquisition or during any of the processes included in the Data Analysis Lifecycle to acquire, process or analyse Research Data about a System or a set of them with an Instrument, which is used to generate this metadata.',
    )
    measurementPurpose: Optional[MeasurementPurpose] = Field(
        None,
        description='(Required) - Measurement is experimental Data Acquisition, typically performed on a Sample using an experimental Technique. It may also be performed during Fabrication or Sample Preparation, e.g., to characterise the intermediate stages and/or the final resulting Precursor(s) or Sample(s), respectively. A Measurement may require the use of Consumables.',
    )
    measurementDescription: Optional[str] = Field(
        None, description='(Optional) - Description about the measurement.'
    )
    equipment: Optional[str] = Field(
        None,
        description='(Optional) - Any kind of physical or virtual item, device, machine or other tools used to perform one or more Fabrication(s), Sample Preparation(s), Model Preparation(s), Data Acquisition(s) and/or any of the processes included in the Data Analysis Lifecycle. Usually, the Equipment is located in a Laboratory hosted by an Institution and/or can be virtually or remotely accessed. Equipment is usually an investment. According to this definition, an Instrument is a particular type of Equipment.',
    )
    consumables: Optional[List[str]] = Field(
        None,
        description='(Optional) - Auxiliary entity used during Fabrication, Sample Preparation or Measurement which has a limited time capacity or is limited in its number of uses before it is disposed of, necessary to the process itself and normally bought from third party manufacturers. Examples are: gloves, syringes, wipes, etching solutions, glass slides, spatulas, weighing paper, two-sided tape.',
        min_length=1,
    )
    parents: Optional[List[Parent]] = Field(
        None,
        description='(Required) - Parents of this metadata like the metadata document of the sample with which the measurement was performed.',
        min_length=1,
    )
    entryID: Optional[Identifier] = Field(
        None,
        description='entryID (Optional)- Identifier of the measurement usually provided by the project or the laboratory',
    )
    title: Optional[str] = Field(
        None, description='(Required)- Extended title of the measurement'
    )
    startTime: Optional[
        constr(pattern=r'^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z?)$')
    ] = Field(
        None,
        description='(Optional)- Start time of the measurement in the format YYYY-MM-DDTHH:mm:ss.sssZ',
    )
    endTime: Optional[
        constr(pattern=r'^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z?)$')
    ] = Field(
        None,
        description='(Required)- End time of the measurement in the format YYYY-MM-DDTHH:mm:ss.sssZ',
    )
    program: Optional[Program] = Field(
        None,
        description='(Optional)- Details concerning the program (or software) used for aquisition',
    )
    revision: Optional[Revision] = Field(
        None,
        description='(Optional)- Details concerning any revision to the document due to e.g. re-calibration, reprocessing, new analysis, new instrument definition format',
    )
    user: Optional[User] = Field(
        None,
        description='(Required)- The contact information of the user responsible for the measurement',
    )
    instrument: Optional[InstrumentDetails] = Field(
        None, description='(Required)- Details concerning the instrument settings'
    )


class Sem(BaseModel):
    entry: Optional[Entry] = None
